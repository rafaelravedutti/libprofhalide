module name=blur_x, target=x86-64-linux-avx-avx2-avx512-avx512_skylake-f16c-fma-perfctr-sse41
external_plus_metadata func blur_x (input, blur_x) {
(void *)register_destructor("halide_perfctr_pipeline_end", (void *)halide_perfctr_get_state())
allocate profiling_loop_threads[(void *) * 0]
allocate profiling_func_threads_cons[(void *) * 2]
allocate profiling_func_threads_prod[(void *) * 2]
allocate profiling_loop_names[(void *) * 0]
allocate profiling_func_names[(void *) * 2]
profiling_func_threads_prod[1] = 1
profiling_func_names[0] = "overhead"
profiling_func_names[1] = "blur_x"
let profiler_token = halide_perfctr_pipeline_start("blur_x", 2, 0, profiling_func_names, profiling_loop_names, profiling_func_threads_prod, profiling_func_threads_cons, profiling_loop_threads)
assert(0 <= profiler_token, profiler_token)
let profiler_state = (void *)halide_perfctr_get_state()
halide_perfctr_register_func(profiler_state, profiler_token, 1, (uint1)1)
assert((uint64)reinterpret((halide_buffer_t *)input.buffer) != (uint64)0, halide_error_buffer_argument_is_null("input"))
assert((uint64)reinterpret((halide_buffer_t *)blur_x.buffer) != (uint64)0, halide_error_buffer_argument_is_null("blur_x"))
let blur_x = (void *)_halide_buffer_get_host((halide_buffer_t *)blur_x.buffer)
let blur_x.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)blur_x.buffer)
let blur_x.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)blur_x.buffer)
let blur_x.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)blur_x.buffer)
let blur_x.min.0 = _halide_buffer_get_min((halide_buffer_t *)blur_x.buffer, 0)
let blur_x.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)blur_x.buffer, 0)
let blur_x.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)blur_x.buffer, 0)
let blur_x.min.1 = _halide_buffer_get_min((halide_buffer_t *)blur_x.buffer, 1)
let blur_x.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)blur_x.buffer, 1)
let blur_x.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)blur_x.buffer, 1)
let blur_x.min.2 = _halide_buffer_get_min((halide_buffer_t *)blur_x.buffer, 2)
let blur_x.extent.2 = _halide_buffer_get_extent((halide_buffer_t *)blur_x.buffer, 2)
let blur_x.stride.2 = _halide_buffer_get_stride((halide_buffer_t *)blur_x.buffer, 2)
let input = (void *)_halide_buffer_get_host((halide_buffer_t *)input.buffer)
let input.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)input.buffer)
let input.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)input.buffer)
let input.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)input.buffer)
let input.min.0 = _halide_buffer_get_min((halide_buffer_t *)input.buffer, 0)
let input.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)input.buffer, 0)
let input.min.1 = _halide_buffer_get_min((halide_buffer_t *)input.buffer, 1)
let input.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)input.buffer, 1)
let input.min.2 = _halide_buffer_get_min((halide_buffer_t *)input.buffer, 2)
let input.extent.2 = _halide_buffer_get_extent((halide_buffer_t *)input.buffer, 2)
let input.stride.2 = _halide_buffer_get_stride((halide_buffer_t *)input.buffer, 2)
let input.extent.0.required.s = max(min(blur_x.extent.0 + blur_x.min.0, 10239), max(max(max(max(max(max(min(blur_x.extent.0 + blur_x.min.0, 10243), min(blur_x.extent.0 + blur_x.min.0, 10237) + 6), min(blur_x.extent.0 + blur_x.min.0, 10242) + 1), min(blur_x.extent.0 + blur_x.min.0, 10238) + 5), min(blur_x.extent.0 + blur_x.min.0, 10240) + 3), min(blur_x.extent.0 + blur_x.min.0, 10241) + 2), 4) + -4) - min(min(min(max(min(blur_x.min.0, 10239), 0), min(min(min(max(min(blur_x.min.0, 10242), 3), max(min(blur_x.min.0, 10236), -3) + 6), max(min(blur_x.min.0, 10241), 2) + 1), max(min(blur_x.min.0, 10237), -2) + 5) + -3), max(min(blur_x.min.0, 10240), 1) + -1), max(min(blur_x.min.0, 10238), -1) + 1)
let input.min.0.required = min(min(min(max(min(blur_x.min.0, 10239), 0), min(min(min(max(min(blur_x.min.0, 10242), 3), max(min(blur_x.min.0, 10236), -3) + 6), max(min(blur_x.min.0, 10241), 2) + 1), max(min(blur_x.min.0, 10237), -2) + 5) + -3), max(min(blur_x.min.0, 10240), 1) + -1), max(min(blur_x.min.0, 10238), -1) + 1)
let input.extent.1.required.s = max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(max(min(blur_x.extent.1 + blur_x.min.1, 4319), max(max(max(max(max(max(min(blur_x.extent.1 + blur_x.min.1, 4323), max(min(blur_x.extent.1 + blur_x.min.1, 4317), -2) + 6), min(blur_x.extent.1 + blur_x.min.1, 4322) + 1), min(blur_x.extent.1 + blur_x.min.1, 4318) + 5), min(blur_x.extent.1 + blur_x.min.1, 4320) + 3), min(blur_x.extent.1 + blur_x.min.1, 4321) + 2), min(blur_x.extent.1 + blur_x.min.1, 4323)) + -4), min(blur_x.extent.1 + blur_x.min.1, 4317) + 2), min(blur_x.extent.1 + blur_x.min.1, 4322) + -3), min(blur_x.extent.1 + blur_x.min.1, 4318) + 1), min(blur_x.extent.1 + blur_x.min.1, 4320) + -1), min(blur_x.extent.1 + blur_x.min.1, 4321) + -2), min(blur_x.extent.1 + blur_x.min.1, 4319)), min(blur_x.extent.1 + blur_x.min.1, 4323) + -4), min(blur_x.extent.1 + blur_x.min.1, 4317) + 2), min(blur_x.extent.1 + blur_x.min.1, 4322) + -3), min(blur_x.extent.1 + blur_x.min.1, 4318) + 1), min(blur_x.extent.1 + blur_x.min.1, 4320) + -1), min(blur_x.extent.1 + blur_x.min.1, 4321) + -2), min(blur_x.extent.1 + blur_x.min.1, 4319)), min(blur_x.extent.1 + blur_x.min.1, 4323) + -4), min(blur_x.extent.1 + blur_x.min.1, 4317) + 2), min(blur_x.extent.1 + blur_x.min.1, 4322) + -3), min(blur_x.extent.1 + blur_x.min.1, 4318) + 1), min(blur_x.extent.1 + blur_x.min.1, 4320) + -1), min(blur_x.extent.1 + blur_x.min.1, 4321) + -2), min(blur_x.extent.1 + blur_x.min.1, 4319)), min(blur_x.extent.1 + blur_x.min.1, 4323) + -4), min(blur_x.extent.1 + blur_x.min.1, 4317) + 2), min(blur_x.extent.1 + blur_x.min.1, 4322) + -3), min(blur_x.extent.1 + blur_x.min.1, 4318) + 1), min(blur_x.extent.1 + blur_x.min.1, 4320) + -1), min(blur_x.extent.1 + blur_x.min.1, 4321) + -2), min(blur_x.extent.1 + blur_x.min.1, 4319)), min(blur_x.extent.1 + blur_x.min.1, 4323) + -4), min(blur_x.extent.1 + blur_x.min.1, 4317) + 2), min(blur_x.extent.1 + blur_x.min.1, 4322) + -3), min(blur_x.extent.1 + blur_x.min.1, 4318) + 1), min(blur_x.extent.1 + blur_x.min.1, 4320) + -1), min(blur_x.extent.1 + blur_x.min.1, 4321) + -2), min(blur_x.extent.1 + blur_x.min.1, 4319)), min(blur_x.extent.1 + blur_x.min.1, 4323) + -4), min(blur_x.extent.1 + blur_x.min.1, 4317) + 2), min(blur_x.extent.1 + blur_x.min.1, 4322) + -3), min(blur_x.extent.1 + blur_x.min.1, 4318) + 1), min(blur_x.extent.1 + blur_x.min.1, 4320) + -1), min(blur_x.extent.1 + blur_x.min.1, 4321) + -2), min(blur_x.extent.1 + blur_x.min.1, 4319)) - min(min(min(max(min(blur_x.min.1, 4319), 0), min(min(min(min(min(min(min(max(min(blur_x.min.1, 4319), 0), min(min(min(min(min(min(min(max(min(blur_x.min.1, 4319), 0), min(min(min(min(min(min(min(max(min(blur_x.min.1, 4319), 0), min(min(min(min(min(min(min(max(min(blur_x.min.1, 4319), 0), min(min(min(min(min(min(min(max(min(blur_x.min.1, 4319), 0), min(min(min(min(min(min(min(max(min(blur_x.min.1, 4319), 0), min(min(min(max(min(blur_x.min.1, 4322), 3), max(min(blur_x.min.1, 4316), -3) + 6), max(min(blur_x.min.1, 4321), 2) + 1), max(min(blur_x.min.1, 4317), -2) + 5) + -3), max(min(blur_x.min.1, 4320), 1) + -1), max(min(blur_x.min.1, 4318), -1) + 1), max(min(blur_x.min.1, 4322), 3) + -3), max(min(blur_x.min.1, 4316), -3) + 3), max(min(blur_x.min.1, 4321), 2) + -2), max(min(blur_x.min.1, 4317), -2) + 2)), max(min(blur_x.min.1, 4320), 1) + -1), max(min(blur_x.min.1, 4318), -1) + 1), max(min(blur_x.min.1, 4322), 3) + -3), max(min(blur_x.min.1, 4316), -3) + 3), max(min(blur_x.min.1, 4321), 2) + -2), max(min(blur_x.min.1, 4317), -2) + 2)), max(min(blur_x.min.1, 4320), 1) + -1), max(min(blur_x.min.1, 4318), -1) + 1), max(min(blur_x.min.1, 4322), 3) + -3), max(min(blur_x.min.1, 4316), -3) + 3), max(min(blur_x.min.1, 4321), 2) + -2), max(min(blur_x.min.1, 4317), -2) + 2)), max(min(blur_x.min.1, 4320), 1) + -1), max(min(blur_x.min.1, 4318), -1) + 1), max(min(blur_x.min.1, 4322), 3) + -3), max(min(blur_x.min.1, 4316), -3) + 3), max(min(blur_x.min.1, 4321), 2) + -2), max(min(blur_x.min.1, 4317), -2) + 2)), max(min(blur_x.min.1, 4320), 1) + -1), max(min(blur_x.min.1, 4318), -1) + 1), max(min(blur_x.min.1, 4322), 3) + -3), max(min(blur_x.min.1, 4316), -3) + 3), max(min(blur_x.min.1, 4321), 2) + -2), max(min(blur_x.min.1, 4317), -2) + 2)), max(min(blur_x.min.1, 4320), 1) + -1), max(min(blur_x.min.1, 4318), -1) + 1), max(min(blur_x.min.1, 4322), 3) + -3), max(min(blur_x.min.1, 4316), -3) + 3), max(min(blur_x.min.1, 4321), 2) + -2), max(min(blur_x.min.1, 4317), -2) + 2)), max(min(blur_x.min.1, 4320), 1) + -1), max(min(blur_x.min.1, 4318), -1) + 1)
let input.min.1.required = min(min(min(max(min(blur_x.min.1, 4319), 0), min(min(min(min(min(min(min(max(min(blur_x.min.1, 4319), 0), min(min(min(min(min(min(min(max(min(blur_x.min.1, 4319), 0), min(min(min(min(min(min(min(max(min(blur_x.min.1, 4319), 0), min(min(min(min(min(min(min(max(min(blur_x.min.1, 4319), 0), min(min(min(min(min(min(min(max(min(blur_x.min.1, 4319), 0), min(min(min(min(min(min(min(max(min(blur_x.min.1, 4319), 0), min(min(min(max(min(blur_x.min.1, 4322), 3), max(min(blur_x.min.1, 4316), -3) + 6), max(min(blur_x.min.1, 4321), 2) + 1), max(min(blur_x.min.1, 4317), -2) + 5) + -3), max(min(blur_x.min.1, 4320), 1) + -1), max(min(blur_x.min.1, 4318), -1) + 1), max(min(blur_x.min.1, 4322), 3) + -3), max(min(blur_x.min.1, 4316), -3) + 3), max(min(blur_x.min.1, 4321), 2) + -2), max(min(blur_x.min.1, 4317), -2) + 2)), max(min(blur_x.min.1, 4320), 1) + -1), max(min(blur_x.min.1, 4318), -1) + 1), max(min(blur_x.min.1, 4322), 3) + -3), max(min(blur_x.min.1, 4316), -3) + 3), max(min(blur_x.min.1, 4321), 2) + -2), max(min(blur_x.min.1, 4317), -2) + 2)), max(min(blur_x.min.1, 4320), 1) + -1), max(min(blur_x.min.1, 4318), -1) + 1), max(min(blur_x.min.1, 4322), 3) + -3), max(min(blur_x.min.1, 4316), -3) + 3), max(min(blur_x.min.1, 4321), 2) + -2), max(min(blur_x.min.1, 4317), -2) + 2)), max(min(blur_x.min.1, 4320), 1) + -1), max(min(blur_x.min.1, 4318), -1) + 1), max(min(blur_x.min.1, 4322), 3) + -3), max(min(blur_x.min.1, 4316), -3) + 3), max(min(blur_x.min.1, 4321), 2) + -2), max(min(blur_x.min.1, 4317), -2) + 2)), max(min(blur_x.min.1, 4320), 1) + -1), max(min(blur_x.min.1, 4318), -1) + 1), max(min(blur_x.min.1, 4322), 3) + -3), max(min(blur_x.min.1, 4316), -3) + 3), max(min(blur_x.min.1, 4321), 2) + -2), max(min(blur_x.min.1, 4317), -2) + 2)), max(min(blur_x.min.1, 4320), 1) + -1), max(min(blur_x.min.1, 4318), -1) + 1), max(min(blur_x.min.1, 4322), 3) + -3), max(min(blur_x.min.1, 4316), -3) + 3), max(min(blur_x.min.1, 4321), 2) + -2), max(min(blur_x.min.1, 4317), -2) + 2)), max(min(blur_x.min.1, 4320), 1) + -1), max(min(blur_x.min.1, 4318), -1) + 1)
assert(!(uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)input.buffer) || ((input.extent.0.required.s + input.min.0.required) <= 10239), halide_error_constraints_make_required_region_smaller("Input buffer input", 0, 0, 10239, input.min.0.required, input.extent.0.required.s + input.min.0.required))
assert(!(uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)input.buffer) || ((input.extent.1.required.s + input.min.1.required) <= 4319), halide_error_constraints_make_required_region_smaller("Input buffer input", 1, 0, 4319, input.min.1.required, input.extent.1.required.s + input.min.1.required))
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)blur_x.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)blur_x.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)blur_x.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 32, 3, (halide_dimension_t *)make_struct(blur_x.min.0, blur_x.extent.0, 1, 0, blur_x.min.1, blur_x.extent.1, blur_x.extent.0, 0, blur_x.min.2, blur_x.extent.2, blur_x.extent.0*blur_x.extent.1, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)input.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)input.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)input.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 32, 3, (halide_dimension_t *)make_struct(0, 10240, 1, 0, 0, 4320, 10240, 0, 0, 1, 44236800, 0), (uint64)0)
}
if (!((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)blur_x.buffer) || (uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)input.buffer))) {
 assert(blur_x.type == (uint32)73730, halide_error_bad_type("Output buffer blur_x", blur_x.type, (uint32)73730))
 assert(blur_x.dimensions == 3, halide_error_bad_dimensions("Output buffer blur_x", blur_x.dimensions, 3))
 assert(input.type == (uint32)73730, halide_error_bad_type("Input buffer input", input.type, (uint32)73730))
 assert(input.dimensions == 3, halide_error_bad_dimensions("Input buffer input", input.dimensions, 3))
 assert(0 <= blur_x.extent.0, halide_error_buffer_extents_negative("Output buffer blur_x", 0, blur_x.extent.0))
 assert(0 <= blur_x.extent.1, halide_error_buffer_extents_negative("Output buffer blur_x", 1, blur_x.extent.1))
 assert(0 <= blur_x.extent.2, halide_error_buffer_extents_negative("Output buffer blur_x", 2, blur_x.extent.2))
 assert((input.min.0 <= input.min.0.required) && (((input.extent.0.required.s + input.min.0.required) + 1) <= (input.extent.0 + input.min.0)), halide_error_access_out_of_bounds("Input buffer input", 0, input.min.0.required, input.extent.0.required.s + input.min.0.required, input.min.0, (input.extent.0 + input.min.0) + -1))
 assert(0 <= input.extent.0, halide_error_buffer_extents_negative("Input buffer input", 0, input.extent.0))
 assert((input.min.1 <= input.min.1.required) && (((input.extent.1.required.s + input.min.1.required) + 1) <= (input.extent.1 + input.min.1)), halide_error_access_out_of_bounds("Input buffer input", 1, input.min.1.required, input.extent.1.required.s + input.min.1.required, input.min.1, (input.extent.1 + input.min.1) + -1))
 assert(0 <= input.extent.1, halide_error_buffer_extents_negative("Input buffer input", 1, input.extent.1))
 assert((input.min.2 <= 0) && (1 <= (input.extent.2 + input.min.2)), halide_error_access_out_of_bounds("Input buffer input", 2, 0, 0, input.min.2, (input.extent.2 + input.min.2) + -1))
 assert(0 <= input.extent.2, halide_error_buffer_extents_negative("Input buffer input", 2, input.extent.2))
 assert(blur_x.stride.0 == 1, halide_error_constraint_violated("blur_x.stride.0", blur_x.stride.0, "1", 1))
 assert(input.stride.0 == 1, halide_error_constraint_violated("input.stride.0", input.stride.0, "1", 1))
 assert(input.min.0 == 0, halide_error_constraint_violated("input.min.0", input.min.0, "0", 0))
 assert(input.extent.0 == 10240, halide_error_constraint_violated("input.extent.0", input.extent.0, "10240", 10240))
 assert(input.stride.1 == 10240, halide_error_constraint_violated("input.stride.1", input.stride.1, "10240", 10240))
 assert(input.min.1 == 0, halide_error_constraint_violated("input.min.1", input.min.1, "0", 0))
 assert(input.extent.1 == 4320, halide_error_constraint_violated("input.extent.1", input.extent.1, "4320", 4320))
 assert(input.stride.2 == 44236800, halide_error_constraint_violated("input.stride.2", input.stride.2, "44236800", 44236800))
 assert(input.min.2 == 0, halide_error_constraint_violated("input.min.2", input.min.2, "0", 0))
 assert(input.extent.2 == 1, halide_error_constraint_violated("input.extent.2", input.extent.2, "1", 1))
 let blur_x.total_extent.1 = int64(blur_x.extent.1)*int64(blur_x.extent.0)
 let blur_x.total_extent.2 = blur_x.total_extent.1*int64(blur_x.extent.2)
 assert((uint64)abs(int64(blur_x.extent.0)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("blur_x", (uint64)abs(int64(blur_x.extent.0)), (uint64)2147483647))
 assert((uint64)abs(int64(blur_x.extent.1)*int64(blur_x.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("blur_x", (uint64)abs(int64(blur_x.extent.1)*int64(blur_x.stride.1)), (uint64)2147483647))
 assert(blur_x.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("blur_x", blur_x.total_extent.1, (int64)2147483647))
 assert((uint64)abs(int64(blur_x.extent.2)*int64(blur_x.stride.2)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("blur_x", (uint64)abs(int64(blur_x.extent.2)*int64(blur_x.stride.2)), (uint64)2147483647))
 assert(blur_x.total_extent.2 <= (int64)2147483647, halide_error_buffer_extents_too_large("blur_x", blur_x.total_extent.2, (int64)2147483647))
 assert(!blur_x.device_dirty, halide_error_device_dirty_with_no_device_support("Output buffer blur_x"))
 assert(!input.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer input"))
 assert((void *)reinterpret((uint64)0) != blur_x, halide_error_host_is_null("Output buffer blur_x"))
 assert((void *)reinterpret((uint64)0) != input, halide_error_host_is_null("Input buffer input"))
 produce blur_x {
  halide_perfctr_enter_func(profiler_state, profiler_token, 1, (uint1)1)
  let t568 = blur_x.extent.0 + blur_x.min.0
  let t569 = blur_x.extent.1 + blur_x.min.1
  let t563 = min(max(blur_x.min.1, 4317), t569)
  let t562 = min(max(blur_x.min.1, 3), t569)
  let t566 = min(max(blur_x.min.0, 10237), t568)
  let t565 = min(max(blur_x.min.0, 3), t568)
  let t564 = ((blur_x.min.2*blur_x.stride.2) + (blur_x.min.1*blur_x.stride.1)) + blur_x.min.0
  for (blur_x.s0.c, blur_x.min.2, blur_x.extent.2) {
   halide_perfctr_leave_func(profiler_state, profiler_token, 1, (uint1)1)
   let t570 = (blur_x.s0.c*blur_x.stride.2) - t564
   let t573 = t568 - t566
   parallel (blur_x.s0.y, blur_x.min.1, blur_x.extent.1) {
    halide_perfctr_enter_func(profiler_state, profiler_token, 1, (uint1)1)
    if (blur_x.s0.y < t562) {
     let t574 = max(blur_x.s0.y, 3)
     let t576 = max(blur_x.s0.y, 2)
     let t579 = max(blur_x.s0.y, 1)
     let t578 = max(blur_x.s0.y, 0)
     let t580 = max(blur_x.s0.y, -1)
     let t577 = max(blur_x.s0.y, -2)
     let t575 = max(blur_x.s0.y, -3)
     let t581 = (blur_x.s0.y*blur_x.stride.1) + t570
     for (blur_x.s0.x, blur_x.min.0, blur_x.extent.0) {
      let t534 = max(min(blur_x.s0.x, 10242), 3)
      let t541 = max(min(blur_x.s0.x, 10236), -3)
      let t542 = max(min(blur_x.s0.x, 10241), 2)
      let t543 = max(min(blur_x.s0.x, 10237), -2)
      let t544 = max(min(blur_x.s0.x, 10239), 0)
      let t545 = max(min(blur_x.s0.x, 10240), 1)
      let t546 = max(min(blur_x.s0.x, 10238), -1)
      blur_x[blur_x.s0.x + t581] = (((((input[((t574*10240) + t534) + -30723] + input[((t575*10240) + t534) + 30717])*0.035994f) + (((input[((t576*10240) + t534) + -20483] + input[((t577*10240) + t534) + 20477])*0.109340f) + ((input[((t578*10240) + t534) + -3]*0.265961f) + ((input[((t579*10240) + t534) + -10243] + input[((t580*10240) + t534) + 10237])*0.212965f)))) + (((input[((t574*10240) + t541) + -30717] + input[((t575*10240) + t541) + 30723])*0.035994f) + (((input[((t576*10240) + t541) + -20477] + input[((t577*10240) + t541) + 20483])*0.109340f) + ((input[((t578*10240) + t541) + 3]*0.265961f) + ((input[((t579*10240) + t541) + -10237] + input[((t580*10240) + t541) + 10243])*0.212965f)))))*0.035994f) + ((((((input[((t574*10240) + t542) + -30722] + input[((t575*10240) + t542) + 30718])*0.035994f) + (((input[((t576*10240) + t542) + -20482] + input[((t577*10240) + t542) + 20478])*0.109340f) + ((input[((t578*10240) + t542) + -2]*0.265961f) + ((input[((t579*10240) + t542) + -10242] + input[((t580*10240) + t542) + 10238])*0.212965f)))) + (((input[((t574*10240) + t543) + -30718] + input[((t575*10240) + t543) + 30722])*0.035994f) + (((input[((t576*10240) + t543) + -20478] + input[((t577*10240) + t543) + 20482])*0.109340f) + ((input[((t578*10240) + t543) + 2]*0.265961f) + ((input[((t579*10240) + t543) + -10238] + input[((t580*10240) + t543) + 10242])*0.212965f)))))*0.109340f) + (((((input[((t574*10240) + t544) + -30720] + input[((t575*10240) + t544) + 30720])*0.035994f) + (((input[((t576*10240) + t544) + -20480] + input[((t577*10240) + t544) + 20480])*0.109340f) + ((input[(t578*10240) + t544]*0.265961f) + ((input[((t579*10240) + t544) + -10240] + input[((t580*10240) + t544) + 10240])*0.212965f))))*0.265961f) + (((((input[((t574*10240) + t545) + -30721] + input[((t575*10240) + t545) + 30719])*0.035994f) + (((input[((t576*10240) + t545) + -20481] + input[((t577*10240) + t545) + 20479])*0.109340f) + ((input[((t578*10240) + t545) + -1]*0.265961f) + ((input[((t579*10240) + t545) + -10241] + input[((t580*10240) + t545) + 10239])*0.212965f)))) + (((input[((t574*10240) + t546) + -30719] + input[((t575*10240) + t546) + 30721])*0.035994f) + (((input[((t576*10240) + t546) + -20479] + input[((t577*10240) + t546) + 20481])*0.109340f) + ((input[((t578*10240) + t546) + 1]*0.265961f) + ((input[((t579*10240) + t546) + -10239] + input[((t580*10240) + t546) + 10241])*0.212965f)))))*0.212965f)))
     }
    } else if (blur_x.s0.y < t563) {
     let t583 = blur_x.s0.y*10240
     let t582 = t565 - blur_x.min.0
     let t584 = (blur_x.s0.y*blur_x.stride.1) + t570
     for (blur_x.s0.x, blur_x.min.0, t582) {
      let t481 = max(blur_x.s0.x, 3) + t583
      let t482 = max(blur_x.s0.x, -3) + t583
      let t483 = max(blur_x.s0.x, 2) + t583
      let t484 = max(blur_x.s0.x, -2) + t583
      let t485 = max(blur_x.s0.x, 0) + t583
      let t486 = max(blur_x.s0.x, 1) + t583
      let t487 = max(blur_x.s0.x, -1) + t583
      blur_x[blur_x.s0.x + t584] = (((((input[t481 + -30723] + input[t481 + 30717])*0.035994f) + (((input[t481 + -20483] + input[t481 + 20477])*0.109340f) + ((input[t481 + -3]*0.265961f) + ((input[t481 + -10243] + input[t481 + 10237])*0.212965f)))) + (((input[t482 + -30717] + input[t482 + 30723])*0.035994f) + (((input[t482 + -20477] + input[t482 + 20483])*0.109340f) + ((input[t482 + 3]*0.265961f) + ((input[t482 + -10237] + input[t482 + 10243])*0.212965f)))))*0.035994f) + ((((((input[t483 + -30722] + input[t483 + 30718])*0.035994f) + (((input[t483 + -20482] + input[t483 + 20478])*0.109340f) + ((input[t483 + -2]*0.265961f) + ((input[t483 + -10242] + input[t483 + 10238])*0.212965f)))) + (((input[t484 + -30718] + input[t484 + 30722])*0.035994f) + (((input[t484 + -20478] + input[t484 + 20482])*0.109340f) + ((input[t484 + 2]*0.265961f) + ((input[t484 + -10238] + input[t484 + 10242])*0.212965f)))))*0.109340f) + (((((input[t485 + -30720] + input[t485 + 30720])*0.035994f) + (((input[t485 + -20480] + input[t485 + 20480])*0.109340f) + ((input[t485]*0.265961f) + ((input[t485 + -10240] + input[t485 + 10240])*0.212965f))))*0.265961f) + (((((input[t486 + -30721] + input[t486 + 30719])*0.035994f) + (((input[t486 + -20481] + input[t486 + 20479])*0.109340f) + ((input[t486 + -1]*0.265961f) + ((input[t486 + -10241] + input[t486 + 10239])*0.212965f)))) + (((input[t487 + -30719] + input[t487 + 30721])*0.035994f) + (((input[t487 + -20479] + input[t487 + 20481])*0.109340f) + ((input[t487 + 1]*0.265961f) + ((input[t487 + -10239] + input[t487 + 10241])*0.212965f)))))*0.212965f)))
     }
     let t586 = blur_x.s0.y*10240
     let t585 = t566 - t565
     let t587 = (blur_x.s0.y*blur_x.stride.1) + t570
     for (blur_x.s0.x, t565, t585) {
      let t547 = blur_x.s0.x + t586
      blur_x[blur_x.s0.x + t587] = (((((input[t547 + -30723] + input[t547 + 30717])*0.035994f) + (((input[t547 + -20483] + input[t547 + 20477])*0.109340f) + ((input[t547 + -3]*0.265961f) + ((input[t547 + -10243] + input[t547 + 10237])*0.212965f)))) + (((input[t547 + -30717] + input[t547 + 30723])*0.035994f) + (((input[t547 + -20477] + input[t547 + 20483])*0.109340f) + ((input[t547 + 3]*0.265961f) + ((input[t547 + -10237] + input[t547 + 10243])*0.212965f)))))*0.035994f) + ((((((input[t547 + -30722] + input[t547 + 30718])*0.035994f) + (((input[t547 + -20482] + input[t547 + 20478])*0.109340f) + ((input[t547 + -2]*0.265961f) + ((input[t547 + -10242] + input[t547 + 10238])*0.212965f)))) + (((input[t547 + -30718] + input[t547 + 30722])*0.035994f) + (((input[t547 + -20478] + input[t547 + 20482])*0.109340f) + ((input[t547 + 2]*0.265961f) + ((input[t547 + -10238] + input[t547 + 10242])*0.212965f)))))*0.109340f) + (((((input[t547 + -30720] + input[t547 + 30720])*0.035994f) + (((input[t547 + -20480] + input[t547 + 20480])*0.109340f) + ((input[t547]*0.265961f) + ((input[t547 + -10240] + input[t547 + 10240])*0.212965f))))*0.265961f) + (((((input[t547 + -30721] + input[t547 + 30719])*0.035994f) + (((input[t547 + -20481] + input[t547 + 20479])*0.109340f) + ((input[t547 + -1]*0.265961f) + ((input[t547 + -10241] + input[t547 + 10239])*0.212965f)))) + (((input[t547 + -30719] + input[t547 + 30721])*0.035994f) + (((input[t547 + -20479] + input[t547 + 20481])*0.109340f) + ((input[t547 + 1]*0.265961f) + ((input[t547 + -10239] + input[t547 + 10241])*0.212965f)))))*0.212965f)))
     }
     let t588 = blur_x.s0.y*10240
     let t589 = (blur_x.s0.y*blur_x.stride.1) + t570
     for (blur_x.s0.x, t566, t573) {
      let t489 = max(min(blur_x.s0.x, 10242), 3) + t588
      let t490 = max(min(blur_x.s0.x, 10236), -3) + t588
      let t491 = max(min(blur_x.s0.x, 10241), 2) + t588
      let t492 = max(min(blur_x.s0.x, 10237), -2) + t588
      let t493 = max(min(blur_x.s0.x, 10239), 0) + t588
      let t494 = max(min(blur_x.s0.x, 10240), 1) + t588
      let t495 = max(min(blur_x.s0.x, 10238), -1) + t588
      blur_x[blur_x.s0.x + t589] = (((((input[t489 + -30723] + input[t489 + 30717])*0.035994f) + (((input[t489 + -20483] + input[t489 + 20477])*0.109340f) + ((input[t489 + -3]*0.265961f) + ((input[t489 + -10243] + input[t489 + 10237])*0.212965f)))) + (((input[t490 + -30717] + input[t490 + 30723])*0.035994f) + (((input[t490 + -20477] + input[t490 + 20483])*0.109340f) + ((input[t490 + 3]*0.265961f) + ((input[t490 + -10237] + input[t490 + 10243])*0.212965f)))))*0.035994f) + ((((((input[t491 + -30722] + input[t491 + 30718])*0.035994f) + (((input[t491 + -20482] + input[t491 + 20478])*0.109340f) + ((input[t491 + -2]*0.265961f) + ((input[t491 + -10242] + input[t491 + 10238])*0.212965f)))) + (((input[t492 + -30718] + input[t492 + 30722])*0.035994f) + (((input[t492 + -20478] + input[t492 + 20482])*0.109340f) + ((input[t492 + 2]*0.265961f) + ((input[t492 + -10238] + input[t492 + 10242])*0.212965f)))))*0.109340f) + (((((input[t493 + -30720] + input[t493 + 30720])*0.035994f) + (((input[t493 + -20480] + input[t493 + 20480])*0.109340f) + ((input[t493]*0.265961f) + ((input[t493 + -10240] + input[t493 + 10240])*0.212965f))))*0.265961f) + (((((input[t494 + -30721] + input[t494 + 30719])*0.035994f) + (((input[t494 + -20481] + input[t494 + 20479])*0.109340f) + ((input[t494 + -1]*0.265961f) + ((input[t494 + -10241] + input[t494 + 10239])*0.212965f)))) + (((input[t495 + -30719] + input[t495 + 30721])*0.035994f) + (((input[t495 + -20479] + input[t495 + 20481])*0.109340f) + ((input[t495 + 1]*0.265961f) + ((input[t495 + -10239] + input[t495 + 10241])*0.212965f)))))*0.212965f)))
     }
    } else {
     let t590 = max(min(blur_x.s0.y, 4322), 3)
     let t592 = max(min(blur_x.s0.y, 4321), 2)
     let t595 = max(min(blur_x.s0.y, 4320), 1)
     let t594 = max(min(blur_x.s0.y, 4319), 0)
     let t596 = max(min(blur_x.s0.y, 4318), -1)
     let t593 = max(min(blur_x.s0.y, 4317), -2)
     let t591 = max(min(blur_x.s0.y, 4316), -3)
     let t597 = (blur_x.s0.y*blur_x.stride.1) + t570
     for (blur_x.s0.x, blur_x.min.0, blur_x.extent.0) {
      let t549 = max(min(blur_x.s0.x, 10242), 3)
      let t556 = max(min(blur_x.s0.x, 10236), -3)
      let t557 = max(min(blur_x.s0.x, 10241), 2)
      let t558 = max(min(blur_x.s0.x, 10237), -2)
      let t559 = max(min(blur_x.s0.x, 10239), 0)
      let t560 = max(min(blur_x.s0.x, 10240), 1)
      let t561 = max(min(blur_x.s0.x, 10238), -1)
      blur_x[blur_x.s0.x + t597] = (((((input[((t590*10240) + t549) + -30723] + input[((t591*10240) + t549) + 30717])*0.035994f) + (((input[((t592*10240) + t549) + -20483] + input[((t593*10240) + t549) + 20477])*0.109340f) + ((input[((t594*10240) + t549) + -3]*0.265961f) + ((input[((t595*10240) + t549) + -10243] + input[((t596*10240) + t549) + 10237])*0.212965f)))) + (((input[((t590*10240) + t556) + -30717] + input[((t591*10240) + t556) + 30723])*0.035994f) + (((input[((t592*10240) + t556) + -20477] + input[((t593*10240) + t556) + 20483])*0.109340f) + ((input[((t594*10240) + t556) + 3]*0.265961f) + ((input[((t595*10240) + t556) + -10237] + input[((t596*10240) + t556) + 10243])*0.212965f)))))*0.035994f) + ((((((input[((t590*10240) + t557) + -30722] + input[((t591*10240) + t557) + 30718])*0.035994f) + (((input[((t592*10240) + t557) + -20482] + input[((t593*10240) + t557) + 20478])*0.109340f) + ((input[((t594*10240) + t557) + -2]*0.265961f) + ((input[((t595*10240) + t557) + -10242] + input[((t596*10240) + t557) + 10238])*0.212965f)))) + (((input[((t590*10240) + t558) + -30718] + input[((t591*10240) + t558) + 30722])*0.035994f) + (((input[((t592*10240) + t558) + -20478] + input[((t593*10240) + t558) + 20482])*0.109340f) + ((input[((t594*10240) + t558) + 2]*0.265961f) + ((input[((t595*10240) + t558) + -10238] + input[((t596*10240) + t558) + 10242])*0.212965f)))))*0.109340f) + (((((input[((t590*10240) + t559) + -30720] + input[((t591*10240) + t559) + 30720])*0.035994f) + (((input[((t592*10240) + t559) + -20480] + input[((t593*10240) + t559) + 20480])*0.109340f) + ((input[(t594*10240) + t559]*0.265961f) + ((input[((t595*10240) + t559) + -10240] + input[((t596*10240) + t559) + 10240])*0.212965f))))*0.265961f) + (((((input[((t590*10240) + t560) + -30721] + input[((t591*10240) + t560) + 30719])*0.035994f) + (((input[((t592*10240) + t560) + -20481] + input[((t593*10240) + t560) + 20479])*0.109340f) + ((input[((t594*10240) + t560) + -1]*0.265961f) + ((input[((t595*10240) + t560) + -10241] + input[((t596*10240) + t560) + 10239])*0.212965f)))) + (((input[((t590*10240) + t561) + -30719] + input[((t591*10240) + t561) + 30721])*0.035994f) + (((input[((t592*10240) + t561) + -20479] + input[((t593*10240) + t561) + 20481])*0.109340f) + ((input[((t594*10240) + t561) + 1]*0.265961f) + ((input[((t595*10240) + t561) + -10239] + input[((t596*10240) + t561) + 10241])*0.212965f)))))*0.212965f)))
     }
    }
    halide_perfctr_leave_func(profiler_state, profiler_token, 1, (uint1)1)
   }
   halide_perfctr_enter_func(profiler_state, profiler_token, 1, (uint1)1)
  }
  halide_perfctr_leave_func(profiler_state, profiler_token, 1, (uint1)1)
 }
}
free profiling_func_threads_prod
free profiling_func_threads_cons
free profiling_loop_threads
free profiling_func_names
free profiling_loop_names
}


