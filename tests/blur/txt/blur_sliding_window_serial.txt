module name=blur_x, target=x86-64-linux-avx-avx2-avx512-avx512_skylake-f16c-fma-perfctr-sse41
external_plus_metadata func blur_x (input, blur_x) {
(void *)register_destructor("halide_perfctr_pipeline_end", (void *)halide_perfctr_get_state())
allocate profiling_loop_threads[(void *) * 1]
allocate profiling_func_threads_cons[(void *) * 3]
allocate profiling_func_threads_prod[(void *) * 3]
allocate profiling_loop_names[(void *) * 1]
allocate profiling_func_names[(void *) * 3]
profiling_loop_threads[0] = 1
profiling_func_threads_cons[2] = 0
profiling_func_threads_prod[2] = 0
profiling_func_threads_prod[1] = 0
profiling_loop_names[0] = "blur_x.s0.c"
profiling_func_names[0] = "overhead"
profiling_func_names[2] = "blur_y"
profiling_func_names[1] = "blur_x"
let profiler_token = halide_perfctr_pipeline_start("blur_x", 3, 1, profiling_func_names, profiling_loop_names, profiling_func_threads_prod, profiling_func_threads_cons, profiling_loop_threads)
assert(0 <= profiler_token, profiler_token)
let profiler_state = (void *)halide_perfctr_get_state()
halide_perfctr_register_loop(profiler_state, profiler_token, 0)
assert((uint64)reinterpret((halide_buffer_t *)input.buffer) != (uint64)0, halide_error_buffer_argument_is_null("input"))
assert((uint64)reinterpret((halide_buffer_t *)blur_x.buffer) != (uint64)0, halide_error_buffer_argument_is_null("blur_x"))
let blur_x = (void *)_halide_buffer_get_host((halide_buffer_t *)blur_x.buffer)
let blur_x.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)blur_x.buffer)
let blur_x.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)blur_x.buffer)
let blur_x.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)blur_x.buffer)
let blur_x.min.0 = _halide_buffer_get_min((halide_buffer_t *)blur_x.buffer, 0)
let blur_x.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)blur_x.buffer, 0)
let blur_x.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)blur_x.buffer, 0)
let blur_x.min.1 = _halide_buffer_get_min((halide_buffer_t *)blur_x.buffer, 1)
let blur_x.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)blur_x.buffer, 1)
let blur_x.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)blur_x.buffer, 1)
let blur_x.min.2 = _halide_buffer_get_min((halide_buffer_t *)blur_x.buffer, 2)
let blur_x.extent.2 = _halide_buffer_get_extent((halide_buffer_t *)blur_x.buffer, 2)
let blur_x.stride.2 = _halide_buffer_get_stride((halide_buffer_t *)blur_x.buffer, 2)
let input = (void *)_halide_buffer_get_host((halide_buffer_t *)input.buffer)
let input.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)input.buffer)
let input.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)input.buffer)
let input.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)input.buffer)
let input.min.0 = _halide_buffer_get_min((halide_buffer_t *)input.buffer, 0)
let input.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)input.buffer, 0)
let input.min.1 = _halide_buffer_get_min((halide_buffer_t *)input.buffer, 1)
let input.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)input.buffer, 1)
let input.min.2 = _halide_buffer_get_min((halide_buffer_t *)input.buffer, 2)
let input.extent.2 = _halide_buffer_get_extent((halide_buffer_t *)input.buffer, 2)
let input.stride.2 = _halide_buffer_get_stride((halide_buffer_t *)input.buffer, 2)
let input.extent.0.required.s = max(min(blur_x.extent.0 + blur_x.min.0, 10237), -2) - max(min(blur_x.min.0, 10242), 3)
let input.extent.1.required.s = max(min(blur_x.extent.1 + blur_x.min.1, 4319), max(max(max(max(max(min(blur_x.extent.1 + blur_x.min.1, 4323), max(min(blur_x.extent.1 + blur_x.min.1, 4317), -2) + 6), min(blur_x.extent.1 + blur_x.min.1, 4322) + 1), min(blur_x.extent.1 + blur_x.min.1, 4318) + 5), min(blur_x.extent.1 + blur_x.min.1, 4320) + 3), min(blur_x.extent.1 + blur_x.min.1, 4321) + 2) + -4) - min(min(min(max(min(blur_x.min.1, 4319), 0), min(min(min(max(min(blur_x.min.1, 4322), 3), max(min(blur_x.min.1, 4316), -3) + 6), max(min(blur_x.min.1, 4321), 2) + 1), max(min(blur_x.min.1, 4317), -2) + 5) + -3), max(min(blur_x.min.1, 4320), 1) + -1), max(min(blur_x.min.1, 4318), -1) + 1)
let input.min.1.required = min(min(min(max(min(blur_x.min.1, 4319), 0), min(min(min(max(min(blur_x.min.1, 4322), 3), max(min(blur_x.min.1, 4316), -3) + 6), max(min(blur_x.min.1, 4321), 2) + 1), max(min(blur_x.min.1, 4317), -2) + 5) + -3), max(min(blur_x.min.1, 4320), 1) + -1), max(min(blur_x.min.1, 4318), -1) + 1)
assert(!(uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)input.buffer) || ((max(min(blur_x.min.0, 10242), 3) + input.extent.0.required.s) <= 10237), halide_error_constraints_make_required_region_smaller("Input buffer input", 0, 0, 10239, max(min(blur_x.min.0, 10242), 3) + -3, (max(min(blur_x.min.0, 10242), 3) + input.extent.0.required.s) + 2))
assert(!(uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)input.buffer) || ((input.extent.1.required.s + input.min.1.required) <= 4319), halide_error_constraints_make_required_region_smaller("Input buffer input", 1, 0, 4319, input.min.1.required, input.extent.1.required.s + input.min.1.required))
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)blur_x.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)blur_x.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)blur_x.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 32, 3, (halide_dimension_t *)make_struct(blur_x.min.0, blur_x.extent.0, 1, 0, blur_x.min.1, blur_x.extent.1, blur_x.extent.0, 0, blur_x.min.2, blur_x.extent.2, blur_x.extent.0*blur_x.extent.1, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)input.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)input.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)input.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 32, 3, (halide_dimension_t *)make_struct(0, 10240, 1, 0, 0, 4320, 10240, 0, 0, 1, 44236800, 0), (uint64)0)
}
if (!((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)blur_x.buffer) || (uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)input.buffer))) {
 assert(blur_x.type == (uint32)73730, halide_error_bad_type("Output buffer blur_x", blur_x.type, (uint32)73730))
 assert(blur_x.dimensions == 3, halide_error_bad_dimensions("Output buffer blur_x", blur_x.dimensions, 3))
 assert(input.type == (uint32)73730, halide_error_bad_type("Input buffer input", input.type, (uint32)73730))
 assert(input.dimensions == 3, halide_error_bad_dimensions("Input buffer input", input.dimensions, 3))
 assert(0 <= blur_x.extent.0, halide_error_buffer_extents_negative("Output buffer blur_x", 0, blur_x.extent.0))
 assert(0 <= blur_x.extent.1, halide_error_buffer_extents_negative("Output buffer blur_x", 1, blur_x.extent.1))
 assert(0 <= blur_x.extent.2, halide_error_buffer_extents_negative("Output buffer blur_x", 2, blur_x.extent.2))
 assert(((input.min.0 + 3) <= max(min(blur_x.min.0, 10242), 3)) && (((max(min(blur_x.min.0, 10242), 3) + input.extent.0.required.s) + 3) <= (input.extent.0 + input.min.0)), halide_error_access_out_of_bounds("Input buffer input", 0, max(min(blur_x.min.0, 10242), 3) + -3, (max(min(blur_x.min.0, 10242), 3) + input.extent.0.required.s) + 2, input.min.0, (input.extent.0 + input.min.0) + -1))
 assert(0 <= input.extent.0, halide_error_buffer_extents_negative("Input buffer input", 0, input.extent.0))
 assert((input.min.1 <= input.min.1.required) && (((input.extent.1.required.s + input.min.1.required) + 1) <= (input.extent.1 + input.min.1)), halide_error_access_out_of_bounds("Input buffer input", 1, input.min.1.required, input.extent.1.required.s + input.min.1.required, input.min.1, (input.extent.1 + input.min.1) + -1))
 assert(0 <= input.extent.1, halide_error_buffer_extents_negative("Input buffer input", 1, input.extent.1))
 assert((input.min.2 <= 0) && (1 <= (input.extent.2 + input.min.2)), halide_error_access_out_of_bounds("Input buffer input", 2, 0, 0, input.min.2, (input.extent.2 + input.min.2) + -1))
 assert(0 <= input.extent.2, halide_error_buffer_extents_negative("Input buffer input", 2, input.extent.2))
 assert(blur_x.stride.0 == 1, halide_error_constraint_violated("blur_x.stride.0", blur_x.stride.0, "1", 1))
 assert(input.stride.0 == 1, halide_error_constraint_violated("input.stride.0", input.stride.0, "1", 1))
 assert(input.min.0 == 0, halide_error_constraint_violated("input.min.0", input.min.0, "0", 0))
 assert(input.extent.0 == 10240, halide_error_constraint_violated("input.extent.0", input.extent.0, "10240", 10240))
 assert(input.stride.1 == 10240, halide_error_constraint_violated("input.stride.1", input.stride.1, "10240", 10240))
 assert(input.min.1 == 0, halide_error_constraint_violated("input.min.1", input.min.1, "0", 0))
 assert(input.extent.1 == 4320, halide_error_constraint_violated("input.extent.1", input.extent.1, "4320", 4320))
 assert(input.stride.2 == 44236800, halide_error_constraint_violated("input.stride.2", input.stride.2, "44236800", 44236800))
 assert(input.min.2 == 0, halide_error_constraint_violated("input.min.2", input.min.2, "0", 0))
 assert(input.extent.2 == 1, halide_error_constraint_violated("input.extent.2", input.extent.2, "1", 1))
 let blur_x.total_extent.1 = int64(blur_x.extent.1)*int64(blur_x.extent.0)
 let blur_x.total_extent.2 = blur_x.total_extent.1*int64(blur_x.extent.2)
 assert((uint64)abs(int64(blur_x.extent.0)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("blur_x", (uint64)abs(int64(blur_x.extent.0)), (uint64)2147483647))
 assert((uint64)abs(int64(blur_x.extent.1)*int64(blur_x.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("blur_x", (uint64)abs(int64(blur_x.extent.1)*int64(blur_x.stride.1)), (uint64)2147483647))
 assert(blur_x.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("blur_x", blur_x.total_extent.1, (int64)2147483647))
 assert((uint64)abs(int64(blur_x.extent.2)*int64(blur_x.stride.2)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("blur_x", (uint64)abs(int64(blur_x.extent.2)*int64(blur_x.stride.2)), (uint64)2147483647))
 assert(blur_x.total_extent.2 <= (int64)2147483647, halide_error_buffer_extents_too_large("blur_x", blur_x.total_extent.2, (int64)2147483647))
 assert(!blur_x.device_dirty, halide_error_device_dirty_with_no_device_support("Output buffer blur_x"))
 assert(!input.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer input"))
 assert((void *)reinterpret((uint64)0) != blur_x, halide_error_host_is_null("Output buffer blur_x"))
 assert((void *)reinterpret((uint64)0) != input, halide_error_host_is_null("Input buffer input"))
 produce blur_x {
  halide_perfctr_enter_loop(profiler_state, profiler_token, 0)
  let t259 = blur_x.extent.1 + blur_x.min.1
  let t256 = min(max(blur_x.min.1, 4317), t259)
  let t255 = min(max(blur_x.min.1, 3), t259)
  let t257 = ((blur_x.min.2*blur_x.stride.2) + (blur_x.min.1*blur_x.stride.1)) + blur_x.min.0
  for (blur_x.s0.c, blur_x.min.2, blur_x.extent.2) {
   allocate blur_y[float32 * 8]
   let t261 = (blur_x.s0.c*blur_x.stride.2) - t257
   let t260 = t255 - blur_x.min.1
   for (blur_x.s0.y, blur_x.min.1, t260) {
    let t262 = max(blur_x.s0.y, 3)*10240
    let t264 = max(blur_x.s0.y, 2)*10240
    let t267 = max(blur_x.s0.y, 1)*10240
    let t266 = max(blur_x.s0.y, 0)*10240
    let t268 = max(blur_x.s0.y, -1)*10240
    let t265 = max(blur_x.s0.y, -2)*10240
    let t263 = max(blur_x.s0.y, -3)*10240
    let t269 = (blur_x.s0.y*blur_x.stride.1) + t261
    for (blur_x.s0.x, blur_x.min.0, blur_x.extent.0) {
     let blur_y.s0.x.min_2.s = select(blur_x.min.0 < blur_x.s0.x, 3, -3)
     produce blur_y {
      let t271 = select(blur_x.min.0 < blur_x.s0.x, 1, 7)
      let t270 = blur_x.s0.x + blur_y.s0.x.min_2.s
      for (blur_y.s0.x, t270, t271) {
       let t252 = max(min(blur_y.s0.x, 10239), 0)
       blur_y[blur_y.s0.x % 8] = ((input[(t252 + t262) + -30720] + input[(t252 + t263) + 30720])*0.035994f) + (((input[(t252 + t264) + -20480] + input[(t252 + t265) + 20480])*0.109340f) + ((input[t252 + t266]*0.265961f) + ((input[(t252 + t267) + -10240] + input[(t252 + t268) + 10240])*0.212965f)))
      }
     }
     consume blur_y {
      blur_x[blur_x.s0.x + t269] = ((blur_y[(blur_x.s0.x + 5) % 8] + blur_y[(blur_x.s0.x + 3) % 8])*0.035994f) + (((blur_y[(blur_x.s0.x + 6) % 8] + blur_y[(blur_x.s0.x + 2) % 8])*0.109340f) + ((blur_y[blur_x.s0.x % 8]*0.265961f) + ((blur_y[(blur_x.s0.x + 7) % 8] + blur_y[(blur_x.s0.x + 1) % 8])*0.212965f)))
     }
    }
   }
   let t273 = (blur_x.s0.c*blur_x.stride.2) - t257
   let t272 = t256 - t255
   for (blur_x.s0.y, t255, t272) {
    let t274 = blur_x.s0.y*10240
    let t275 = (blur_x.s0.y*blur_x.stride.1) + t273
    for (blur_x.s0.x, blur_x.min.0, blur_x.extent.0) {
     let blur_y.s0.x.min_2.s = select(blur_x.min.0 < blur_x.s0.x, 3, -3)
     produce blur_y {
      let blur_y.s0.x.prologue$1 = min(max(blur_x.s0.x + blur_y.s0.x.min_2.s, 0), blur_x.s0.x + 4)
      let blur_y.s0.x.epilogue$1 = min(max(blur_x.s0.x + blur_y.s0.x.min_2.s, 10240), blur_x.s0.x + 4)
      let t277 = (blur_y.s0.x.prologue$1 - blur_x.s0.x) - blur_y.s0.x.min_2.s
      let t276 = blur_x.s0.x + blur_y.s0.x.min_2.s
      for (blur_y.s0.x, t276, t277) {
       let t244 = max(blur_y.s0.x, 0) + t274
       blur_y[blur_y.s0.x % 8] = ((input[t244 + -30720] + input[t244 + 30720])*0.035994f) + (((input[t244 + -20480] + input[t244 + 20480])*0.109340f) + ((input[t244]*0.265961f) + ((input[t244 + -10240] + input[t244 + 10240])*0.212965f)))
      }
      let t278 = blur_y.s0.x.epilogue$1 - blur_y.s0.x.prologue$1
      for (blur_y.s0.x, blur_y.s0.x.prologue$1, t278) {
       let t253 = blur_y.s0.x + t274
       blur_y[blur_y.s0.x % 8] = ((input[t253 + -30720] + input[t253 + 30720])*0.035994f) + (((input[t253 + -20480] + input[t253 + 20480])*0.109340f) + ((input[t253]*0.265961f) + ((input[t253 + -10240] + input[t253 + 10240])*0.212965f)))
      }
      let t279 = blur_x.s0.x - blur_y.s0.x.epilogue$1
      for (blur_y.s0.x, blur_y.s0.x.epilogue$1, t279 + 4) {
       let t246 = max(min(blur_y.s0.x, 10239), 0) + t274
       blur_y[blur_y.s0.x % 8] = ((input[t246 + -30720] + input[t246 + 30720])*0.035994f) + (((input[t246 + -20480] + input[t246 + 20480])*0.109340f) + ((input[t246]*0.265961f) + ((input[t246 + -10240] + input[t246 + 10240])*0.212965f)))
      }
     }
     consume blur_y {
      blur_x[blur_x.s0.x + t275] = ((blur_y[(blur_x.s0.x + 5) % 8] + blur_y[(blur_x.s0.x + 3) % 8])*0.035994f) + (((blur_y[(blur_x.s0.x + 6) % 8] + blur_y[(blur_x.s0.x + 2) % 8])*0.109340f) + ((blur_y[blur_x.s0.x % 8]*0.265961f) + ((blur_y[(blur_x.s0.x + 7) % 8] + blur_y[(blur_x.s0.x + 1) % 8])*0.212965f)))
     }
    }
   }
   let t281 = (blur_x.s0.c*blur_x.stride.2) - t257
   let t280 = t259 - t256
   for (blur_x.s0.y, t256, t280) {
    let t282 = max(min(blur_x.s0.y, 4322), 3)*10240
    let t284 = max(min(blur_x.s0.y, 4321), 2)*10240
    let t287 = max(min(blur_x.s0.y, 4320), 1)*10240
    let t286 = max(min(blur_x.s0.y, 4319), 0)*10240
    let t288 = max(min(blur_x.s0.y, 4318), -1)*10240
    let t285 = max(min(blur_x.s0.y, 4317), -2)*10240
    let t283 = max(min(blur_x.s0.y, 4316), -3)*10240
    let t289 = (blur_x.s0.y*blur_x.stride.1) + t281
    for (blur_x.s0.x, blur_x.min.0, blur_x.extent.0) {
     let blur_y.s0.x.min_2.s = select(blur_x.min.0 < blur_x.s0.x, 3, -3)
     produce blur_y {
      let t291 = select(blur_x.min.0 < blur_x.s0.x, 1, 7)
      let t290 = blur_x.s0.x + blur_y.s0.x.min_2.s
      for (blur_y.s0.x, t290, t291) {
       let t254 = max(min(blur_y.s0.x, 10239), 0)
       blur_y[blur_y.s0.x % 8] = ((input[(t254 + t282) + -30720] + input[(t254 + t283) + 30720])*0.035994f) + (((input[(t254 + t284) + -20480] + input[(t254 + t285) + 20480])*0.109340f) + ((input[t254 + t286]*0.265961f) + ((input[(t254 + t287) + -10240] + input[(t254 + t288) + 10240])*0.212965f)))
      }
     }
     consume blur_y {
      blur_x[blur_x.s0.x + t289] = ((blur_y[(blur_x.s0.x + 5) % 8] + blur_y[(blur_x.s0.x + 3) % 8])*0.035994f) + (((blur_y[(blur_x.s0.x + 6) % 8] + blur_y[(blur_x.s0.x + 2) % 8])*0.109340f) + ((blur_y[blur_x.s0.x % 8]*0.265961f) + ((blur_y[(blur_x.s0.x + 7) % 8] + blur_y[(blur_x.s0.x + 1) % 8])*0.212965f)))
     }
    }
   }
   free blur_y
  }
  halide_perfctr_leave_loop(profiler_state, profiler_token, 0)
 }
}
free profiling_func_threads_prod
free profiling_func_threads_cons
free profiling_loop_threads
free profiling_func_names
free profiling_loop_names
}


