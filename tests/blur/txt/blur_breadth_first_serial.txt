module name=blur_y, target=x86-64-linux-avx-avx2-avx512-avx512_skylake-f16c-fma-perfctr-sse41
external_plus_metadata func blur_y (input, blur_y) {
(void *)register_destructor("halide_perfctr_pipeline_end", (void *)halide_perfctr_get_state())
allocate profiling_loop_threads[(void *) * 0]
allocate profiling_func_threads_cons[(void *) * 3]
allocate profiling_func_threads_prod[(void *) * 3]
allocate profiling_loop_names[(void *) * 0]
allocate profiling_func_names[(void *) * 3]
profiling_func_threads_cons[1] = 1
profiling_func_threads_prod[2] = 1
profiling_func_threads_prod[1] = 1
profiling_func_names[0] = "overhead"
profiling_func_names[2] = "blur_y"
profiling_func_names[1] = "blur_x"
let profiler_token = halide_perfctr_pipeline_start("blur_y", 3, 0, profiling_func_names, profiling_loop_names, profiling_func_threads_prod, profiling_func_threads_cons, profiling_loop_threads)
assert(0 <= profiler_token, profiler_token)
let profiler_state = (void *)halide_perfctr_get_state()
halide_perfctr_register_func(profiler_state, profiler_token, 1, (uint1)0)
halide_perfctr_register_func(profiler_state, profiler_token, 1, (uint1)1)
assert((uint64)reinterpret((halide_buffer_t *)input.buffer) != (uint64)0, halide_error_buffer_argument_is_null("input"))
assert((uint64)reinterpret((halide_buffer_t *)blur_y.buffer) != (uint64)0, halide_error_buffer_argument_is_null("blur_y"))
let blur_y = (void *)_halide_buffer_get_host((halide_buffer_t *)blur_y.buffer)
let blur_y.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)blur_y.buffer)
let blur_y.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)blur_y.buffer)
let blur_y.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)blur_y.buffer)
let blur_y.min.0 = _halide_buffer_get_min((halide_buffer_t *)blur_y.buffer, 0)
let blur_y.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)blur_y.buffer, 0)
let blur_y.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)blur_y.buffer, 0)
let blur_y.min.1 = _halide_buffer_get_min((halide_buffer_t *)blur_y.buffer, 1)
let blur_y.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)blur_y.buffer, 1)
let blur_y.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)blur_y.buffer, 1)
let blur_y.min.2 = _halide_buffer_get_min((halide_buffer_t *)blur_y.buffer, 2)
let blur_y.extent.2 = _halide_buffer_get_extent((halide_buffer_t *)blur_y.buffer, 2)
let blur_y.stride.2 = _halide_buffer_get_stride((halide_buffer_t *)blur_y.buffer, 2)
let input = (void *)_halide_buffer_get_host((halide_buffer_t *)input.buffer)
let input.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)input.buffer)
let input.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)input.buffer)
let input.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)input.buffer)
let input.min.0 = _halide_buffer_get_min((halide_buffer_t *)input.buffer, 0)
let input.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)input.buffer, 0)
let input.min.1 = _halide_buffer_get_min((halide_buffer_t *)input.buffer, 1)
let input.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)input.buffer, 1)
let input.min.2 = _halide_buffer_get_min((halide_buffer_t *)input.buffer, 2)
let input.extent.2 = _halide_buffer_get_extent((halide_buffer_t *)input.buffer, 2)
let input.stride.2 = _halide_buffer_get_stride((halide_buffer_t *)input.buffer, 2)
let blur_y.extent.0.required.s = min(((blur_y.extent.0 + -1)/8)*8, blur_y.extent.0 + -8) - min(blur_y.extent.0, 8)
assert(!(uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)input.buffer) || ((9 <= (min(blur_y.extent.0, 8) + blur_y.min.0)) && (((min(blur_y.extent.0, 8) + blur_y.min.0) + blur_y.extent.0.required.s) <= 10231)), halide_error_constraints_make_required_region_smaller("Input buffer input", 0, 0, 10239, (min(blur_y.extent.0, 8) + blur_y.min.0) + -9, ((min(blur_y.extent.0, 8) + blur_y.min.0) + blur_y.extent.0.required.s) + 8))
assert(!(uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)input.buffer) || ((1 <= blur_y.min.1) && ((blur_y.extent.1 + blur_y.min.1) <= 4319)), halide_error_constraints_make_required_region_smaller("Input buffer input", 1, 0, 4319, blur_y.min.1 + -1, blur_y.extent.1 + blur_y.min.1))
assert(!(uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)input.buffer) || ((0 <= blur_y.min.2) && ((blur_y.extent.2 + blur_y.min.2) <= 3)), halide_error_constraints_make_required_region_smaller("Input buffer input", 2, 0, 2, blur_y.min.2, (blur_y.extent.2 + blur_y.min.2) + -1))
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)blur_y.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)blur_y.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)blur_y.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 32, 3, (halide_dimension_t *)make_struct((min(blur_y.extent.0, 8) + blur_y.min.0) + -8, blur_y.extent.0.required.s + 16, 1, 0, blur_y.min.1, blur_y.extent.1, blur_y.extent.0.required.s + 16, 0, blur_y.min.2, blur_y.extent.2, (blur_y.extent.0.required.s + 16)*blur_y.extent.1, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)input.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)input.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)input.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 32, 3, (halide_dimension_t *)make_struct(0, 10240, 1, 0, 0, 4320, 10240, 0, 0, 3, 44236800, 0), (uint64)0)
}
if (!((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)blur_y.buffer) || (uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)input.buffer))) {
 assert(blur_y.type == (uint32)73730, halide_error_bad_type("Output buffer blur_y", blur_y.type, (uint32)73730))
 assert(blur_y.dimensions == 3, halide_error_bad_dimensions("Output buffer blur_y", blur_y.dimensions, 3))
 assert(input.type == (uint32)73730, halide_error_bad_type("Input buffer input", input.type, (uint32)73730))
 assert(input.dimensions == 3, halide_error_bad_dimensions("Input buffer input", input.dimensions, 3))
 assert((8 <= blur_y.extent.0) && ((((min(blur_y.extent.0, 8) + blur_y.min.0) + blur_y.extent.0.required.s) + 8) <= (blur_y.extent.0 + blur_y.min.0)), halide_error_access_out_of_bounds("Output buffer blur_y", 0, (min(blur_y.extent.0, 8) + blur_y.min.0) + -8, ((min(blur_y.extent.0, 8) + blur_y.min.0) + blur_y.extent.0.required.s) + 7, blur_y.min.0, (blur_y.extent.0 + blur_y.min.0) + -1))
 assert(0 <= blur_y.extent.1, halide_error_buffer_extents_negative("Output buffer blur_y", 1, blur_y.extent.1))
 assert(0 <= blur_y.extent.2, halide_error_buffer_extents_negative("Output buffer blur_y", 2, blur_y.extent.2))
 assert(((input.min.0 + 1) <= blur_y.min.0) && (((blur_y.extent.0.required.s + blur_y.min.0) + 17) <= (input.extent.0 + input.min.0)), halide_error_access_out_of_bounds("Input buffer input", 0, blur_y.min.0 + -1, (blur_y.extent.0.required.s + blur_y.min.0) + 16, input.min.0, (input.extent.0 + input.min.0) + -1))
 assert(0 <= input.extent.0, halide_error_buffer_extents_negative("Input buffer input", 0, input.extent.0))
 assert(((input.min.1 + 1) <= blur_y.min.1) && (((blur_y.extent.1 + blur_y.min.1) + 1) <= (input.extent.1 + input.min.1)), halide_error_access_out_of_bounds("Input buffer input", 1, blur_y.min.1 + -1, blur_y.extent.1 + blur_y.min.1, input.min.1, (input.extent.1 + input.min.1) + -1))
 assert(0 <= input.extent.1, halide_error_buffer_extents_negative("Input buffer input", 1, input.extent.1))
 assert((input.min.2 <= blur_y.min.2) && ((blur_y.extent.2 + blur_y.min.2) <= (input.extent.2 + input.min.2)), halide_error_access_out_of_bounds("Input buffer input", 2, blur_y.min.2, (blur_y.extent.2 + blur_y.min.2) + -1, input.min.2, (input.extent.2 + input.min.2) + -1))
 assert(0 <= input.extent.2, halide_error_buffer_extents_negative("Input buffer input", 2, input.extent.2))
 assert(blur_y.stride.0 == 1, halide_error_constraint_violated("blur_y.stride.0", blur_y.stride.0, "1", 1))
 assert(input.stride.0 == 1, halide_error_constraint_violated("input.stride.0", input.stride.0, "1", 1))
 assert(input.min.0 == 0, halide_error_constraint_violated("input.min.0", input.min.0, "0", 0))
 assert(input.extent.0 == 10240, halide_error_constraint_violated("input.extent.0", input.extent.0, "10240", 10240))
 assert(input.stride.1 == 10240, halide_error_constraint_violated("input.stride.1", input.stride.1, "10240", 10240))
 assert(input.min.1 == 0, halide_error_constraint_violated("input.min.1", input.min.1, "0", 0))
 assert(input.extent.1 == 4320, halide_error_constraint_violated("input.extent.1", input.extent.1, "4320", 4320))
 assert(input.stride.2 == 44236800, halide_error_constraint_violated("input.stride.2", input.stride.2, "44236800", 44236800))
 assert(input.min.2 == 0, halide_error_constraint_violated("input.min.2", input.min.2, "0", 0))
 assert(input.extent.2 == 3, halide_error_constraint_violated("input.extent.2", input.extent.2, "3", 3))
 let blur_y.total_extent.1 = int64(blur_y.extent.1)*int64(blur_y.extent.0)
 let blur_y.total_extent.2 = blur_y.total_extent.1*int64(blur_y.extent.2)
 assert((uint64)abs(int64(blur_y.extent.0)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("blur_y", (uint64)abs(int64(blur_y.extent.0)), (uint64)2147483647))
 assert((uint64)abs(int64(blur_y.extent.1)*int64(blur_y.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("blur_y", (uint64)abs(int64(blur_y.extent.1)*int64(blur_y.stride.1)), (uint64)2147483647))
 assert(blur_y.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("blur_y", blur_y.total_extent.1, (int64)2147483647))
 assert((uint64)abs(int64(blur_y.extent.2)*int64(blur_y.stride.2)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("blur_y", (uint64)abs(int64(blur_y.extent.2)*int64(blur_y.stride.2)), (uint64)2147483647))
 assert(blur_y.total_extent.2 <= (int64)2147483647, halide_error_buffer_extents_too_large("blur_y", blur_y.total_extent.2, (int64)2147483647))
 assert(!blur_y.device_dirty, halide_error_device_dirty_with_no_device_support("Output buffer blur_y"))
 assert(!input.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer input"))
 assert((void *)reinterpret((uint64)0) != blur_y, halide_error_host_is_null("Output buffer blur_y"))
 assert((void *)reinterpret((uint64)0) != input, halide_error_host_is_null("Input buffer input"))
 allocate blur_x[float32 * blur_y.extent.0 * (blur_y.extent.1 + 2) * blur_y.extent.2]
 produce blur_x {
  halide_perfctr_enter_func(profiler_state, profiler_token, 1, (uint1)1)
  let t54 = 0 < (blur_y.extent.0 % 8)
  let t52 = blur_y.extent.0/8
  let t53 = (blur_y.extent.1 + 2)*blur_y.extent.0
  for (blur_x.s0.c, blur_y.min.2, blur_y.extent.2) {
   let t59 = blur_x.s0.c*44236800
   let t57 = (blur_x.s0.c - blur_y.min.2)*t53
   let t58 = (blur_y.extent.0 + blur_y.min.0) + t59
   let t56 = blur_y.min.0 + t59
   for (blur_x.s0.y, blur_y.min.1 + -1, blur_y.extent.1 + 2) {
    let t61 = (((blur_x.s0.y - blur_y.min.1) + 1)*blur_y.extent.0) + t57
    let t60 = (blur_x.s0.y*10240) + t56
    for (blur_x.s0.x.x, 0, t52) {
     let t45 = (blur_x.s0.x.x*8) + t60
     blur_x[ramp((blur_x.s0.x.x*8) + t61, 1, 8)] = (input[ramp(t45 + 1, 1, 8)] + (input[ramp(t45 + -1, 1, 8)] + input[ramp(t45, 1, 8)]))*x8(0.333333f)
    }
    if (t54) {
     let t46 = (blur_x.s0.y*10240) + t58
     blur_x[ramp(((((blur_x.s0.y - blur_y.min.1) + 2)*blur_y.extent.0) + t57) + -8, 1, 8)] = (input[ramp(t46 + -7, 1, 8)] + (input[ramp(t46 + -9, 1, 8)] + input[ramp(t46 + -8, 1, 8)]))*x8(0.333333f)
    }
   }
  }
  halide_perfctr_leave_func(profiler_state, profiler_token, 1, (uint1)1)
 }
 produce blur_y {
  consume blur_x {
   halide_perfctr_enter_func(profiler_state, profiler_token, 1, (uint1)0)
   let t68 = blur_y.min.2*blur_y.stride.2
   let t69 = blur_y.min.1*blur_y.stride.1
   let t66 = 0 < (blur_y.extent.0 % 8)
   let t62 = blur_y.extent.0/8
   let t63 = (blur_y.extent.1 + 2)*blur_y.extent.0
   let t67 = (((blur_y.extent.0 + blur_y.min.0) - t68) - t69) - blur_y.min.0
   let t65 = ((blur_y.min.0 - t68) - t69) - blur_y.min.0
   for (blur_y.s0.c, blur_y.min.2, blur_y.extent.2) {
    let t74 = blur_y.s0.c*blur_y.stride.2
    let t70 = (blur_y.s0.c - blur_y.min.2)*t63
    let t73 = t67 + t74
    let t72 = t65 + t74
    for (blur_y.s0.y, blur_y.min.1, blur_y.extent.1) {
     let t75 = (((blur_y.s0.y - blur_y.min.1) + 1)*blur_y.extent.0) + t70
     let t77 = (blur_y.s0.y*blur_y.stride.1) + t72
     for (blur_y.s0.x.x, 0, t62) {
      let t47 = (blur_y.s0.x.x*8) + t75
      blur_y[ramp((blur_y.s0.x.x*8) + t77, 1, 8)] = (blur_x[ramp(blur_y.extent.0 + t47, 1, 8)] + (blur_x[ramp((blur_y.extent.0*-1) + t47, 1, 8)] + blur_x[ramp(t47, 1, 8)]))*x8(0.333333f)
     }
     if (t66) {
      let t48 = (((blur_y.s0.y - blur_y.min.1) + 2)*blur_y.extent.0) + t70
      blur_y[ramp(((blur_y.s0.y*blur_y.stride.1) + t73) + -8, 1, 8)] = (blur_x[ramp((blur_y.extent.0 + t48) + -8, 1, 8)] + (blur_x[ramp(((blur_y.extent.0*-1) + t48) + -8, 1, 8)] + blur_x[ramp(t48 + -8, 1, 8)]))*x8(0.333333f)
     }
    }
   }
   halide_perfctr_leave_func(profiler_state, profiler_token, 1, (uint1)0)
  }
 }
 free blur_x
}
free profiling_func_threads_prod
free profiling_func_threads_cons
free profiling_loop_threads
free profiling_func_names
free profiling_loop_names
}


