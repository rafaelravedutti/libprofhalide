module name=blur_y, target=x86-64-linux-avx-avx2-avx512-avx512_skylake-f16c-fma-perfctr-sse41
external_plus_metadata func blur_y (input, blur_y) {
(void *)register_destructor("halide_perfctr_pipeline_end", (void *)halide_perfctr_get_state())
allocate profiling_loop_threads[(void *) * 1]
allocate profiling_func_threads_cons[(void *) * 3]
allocate profiling_func_threads_prod[(void *) * 3]
allocate profiling_loop_names[(void *) * 1]
allocate profiling_func_names[(void *) * 3]
profiling_loop_threads[0] = 1
profiling_func_threads_cons[2] = 0
profiling_func_threads_prod[2] = 0
profiling_func_threads_prod[1] = 0
profiling_loop_names[0] = "blur_y.s0.c"
profiling_func_names[0] = "overhead"
profiling_func_names[1] = "blur_y"
profiling_func_names[2] = "blur_x"
let profiler_token = halide_perfctr_pipeline_start("blur_y", 3, 1, profiling_func_names, profiling_loop_names, profiling_func_threads_prod, profiling_func_threads_cons, profiling_loop_threads)
assert(0 <= profiler_token, profiler_token)
let profiler_state = (void *)halide_perfctr_get_state()
halide_perfctr_register_loop(profiler_state, profiler_token, 0)
assert((uint64)reinterpret((halide_buffer_t *)input.buffer) != (uint64)0, halide_error_buffer_argument_is_null("input"))
assert((uint64)reinterpret((halide_buffer_t *)blur_y.buffer) != (uint64)0, halide_error_buffer_argument_is_null("blur_y"))
let blur_y = (void *)_halide_buffer_get_host((halide_buffer_t *)blur_y.buffer)
let blur_y.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)blur_y.buffer)
let blur_y.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)blur_y.buffer)
let blur_y.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)blur_y.buffer)
let blur_y.min.0 = _halide_buffer_get_min((halide_buffer_t *)blur_y.buffer, 0)
let blur_y.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)blur_y.buffer, 0)
let blur_y.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)blur_y.buffer, 0)
let blur_y.min.1 = _halide_buffer_get_min((halide_buffer_t *)blur_y.buffer, 1)
let blur_y.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)blur_y.buffer, 1)
let blur_y.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)blur_y.buffer, 1)
let blur_y.min.2 = _halide_buffer_get_min((halide_buffer_t *)blur_y.buffer, 2)
let blur_y.extent.2 = _halide_buffer_get_extent((halide_buffer_t *)blur_y.buffer, 2)
let blur_y.stride.2 = _halide_buffer_get_stride((halide_buffer_t *)blur_y.buffer, 2)
let input = (void *)_halide_buffer_get_host((halide_buffer_t *)input.buffer)
let input.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)input.buffer)
let input.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)input.buffer)
let input.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)input.buffer)
let input.min.0 = _halide_buffer_get_min((halide_buffer_t *)input.buffer, 0)
let input.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)input.buffer, 0)
let input.min.1 = _halide_buffer_get_min((halide_buffer_t *)input.buffer, 1)
let input.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)input.buffer, 1)
let input.min.2 = _halide_buffer_get_min((halide_buffer_t *)input.buffer, 2)
let input.extent.2 = _halide_buffer_get_extent((halide_buffer_t *)input.buffer, 2)
let input.stride.2 = _halide_buffer_get_stride((halide_buffer_t *)input.buffer, 2)
let blur_y.extent.0.required.s = min(((blur_y.extent.0 + -1)/32)*32, blur_y.extent.0 + -32) - min(blur_y.extent.0, 32)
let blur_y.extent.1.required.s = min(((blur_y.extent.1 + -1)/32)*32, blur_y.extent.1 + -32) - min(blur_y.extent.1, 32)
let blur_y.stride.2.required = (blur_y.extent.0.required.s + 64)*(blur_y.extent.1.required.s + 64)
assert(!(uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)input.buffer) || ((33 <= (min(blur_y.extent.0, 32) + blur_y.min.0)) && (((min(blur_y.extent.0, 32) + blur_y.min.0) + blur_y.extent.0.required.s) <= 10207)), halide_error_constraints_make_required_region_smaller("Input buffer input", 0, 0, 10239, (min(blur_y.extent.0, 32) + blur_y.min.0) + -33, ((min(blur_y.extent.0, 32) + blur_y.min.0) + blur_y.extent.0.required.s) + 32))
assert(!(uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)input.buffer) || ((33 <= (min(blur_y.extent.1, 32) + blur_y.min.1)) && (((min(blur_y.extent.1, 32) + blur_y.min.1) + blur_y.extent.1.required.s) <= 4287)), halide_error_constraints_make_required_region_smaller("Input buffer input", 1, 0, 4319, (min(blur_y.extent.1, 32) + blur_y.min.1) + -33, ((min(blur_y.extent.1, 32) + blur_y.min.1) + blur_y.extent.1.required.s) + 32))
assert(!(uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)input.buffer) || ((0 <= blur_y.min.2) && ((blur_y.extent.2 + blur_y.min.2) <= 3)), halide_error_constraints_make_required_region_smaller("Input buffer input", 2, 0, 2, blur_y.min.2, (blur_y.extent.2 + blur_y.min.2) + -1))
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)blur_y.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)blur_y.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)blur_y.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 32, 3, (halide_dimension_t *)make_struct((min(blur_y.extent.0, 32) + blur_y.min.0) + -32, blur_y.extent.0.required.s + 64, 1, 0, (min(blur_y.extent.1, 32) + blur_y.min.1) + -32, blur_y.extent.1.required.s + 64, blur_y.extent.0.required.s + 64, 0, blur_y.min.2, blur_y.extent.2, blur_y.stride.2.required, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)input.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)input.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)input.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 32, 3, (halide_dimension_t *)make_struct(0, 10240, 1, 0, 0, 4320, 10240, 0, 0, 3, 44236800, 0), (uint64)0)
}
if (!((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)blur_y.buffer) || (uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)input.buffer))) {
 assert(blur_y.type == (uint32)73730, halide_error_bad_type("Output buffer blur_y", blur_y.type, (uint32)73730))
 assert(blur_y.dimensions == 3, halide_error_bad_dimensions("Output buffer blur_y", blur_y.dimensions, 3))
 assert(input.type == (uint32)73730, halide_error_bad_type("Input buffer input", input.type, (uint32)73730))
 assert(input.dimensions == 3, halide_error_bad_dimensions("Input buffer input", input.dimensions, 3))
 assert((32 <= blur_y.extent.0) && ((((min(blur_y.extent.0, 32) + blur_y.min.0) + blur_y.extent.0.required.s) + 32) <= (blur_y.extent.0 + blur_y.min.0)), halide_error_access_out_of_bounds("Output buffer blur_y", 0, (min(blur_y.extent.0, 32) + blur_y.min.0) + -32, ((min(blur_y.extent.0, 32) + blur_y.min.0) + blur_y.extent.0.required.s) + 31, blur_y.min.0, (blur_y.extent.0 + blur_y.min.0) + -1))
 assert((32 <= blur_y.extent.1) && ((((min(blur_y.extent.1, 32) + blur_y.min.1) + blur_y.extent.1.required.s) + 32) <= (blur_y.extent.1 + blur_y.min.1)), halide_error_access_out_of_bounds("Output buffer blur_y", 1, (min(blur_y.extent.1, 32) + blur_y.min.1) + -32, ((min(blur_y.extent.1, 32) + blur_y.min.1) + blur_y.extent.1.required.s) + 31, blur_y.min.1, (blur_y.extent.1 + blur_y.min.1) + -1))
 assert(0 <= blur_y.extent.2, halide_error_buffer_extents_negative("Output buffer blur_y", 2, blur_y.extent.2))
 assert(((input.min.0 + 1) <= blur_y.min.0) && (((blur_y.extent.0.required.s + blur_y.min.0) + 65) <= (input.extent.0 + input.min.0)), halide_error_access_out_of_bounds("Input buffer input", 0, blur_y.min.0 + -1, (blur_y.extent.0.required.s + blur_y.min.0) + 64, input.min.0, (input.extent.0 + input.min.0) + -1))
 assert(0 <= input.extent.0, halide_error_buffer_extents_negative("Input buffer input", 0, input.extent.0))
 assert(((input.min.1 + 1) <= blur_y.min.1) && (((blur_y.extent.1.required.s + blur_y.min.1) + 65) <= (input.extent.1 + input.min.1)), halide_error_access_out_of_bounds("Input buffer input", 1, blur_y.min.1 + -1, (blur_y.extent.1.required.s + blur_y.min.1) + 64, input.min.1, (input.extent.1 + input.min.1) + -1))
 assert(0 <= input.extent.1, halide_error_buffer_extents_negative("Input buffer input", 1, input.extent.1))
 assert((input.min.2 <= blur_y.min.2) && ((blur_y.extent.2 + blur_y.min.2) <= (input.extent.2 + input.min.2)), halide_error_access_out_of_bounds("Input buffer input", 2, blur_y.min.2, (blur_y.extent.2 + blur_y.min.2) + -1, input.min.2, (input.extent.2 + input.min.2) + -1))
 assert(0 <= input.extent.2, halide_error_buffer_extents_negative("Input buffer input", 2, input.extent.2))
 assert(blur_y.stride.0 == 1, halide_error_constraint_violated("blur_y.stride.0", blur_y.stride.0, "1", 1))
 assert(input.stride.0 == 1, halide_error_constraint_violated("input.stride.0", input.stride.0, "1", 1))
 assert(input.min.0 == 0, halide_error_constraint_violated("input.min.0", input.min.0, "0", 0))
 assert(input.extent.0 == 10240, halide_error_constraint_violated("input.extent.0", input.extent.0, "10240", 10240))
 assert(input.stride.1 == 10240, halide_error_constraint_violated("input.stride.1", input.stride.1, "10240", 10240))
 assert(input.min.1 == 0, halide_error_constraint_violated("input.min.1", input.min.1, "0", 0))
 assert(input.extent.1 == 4320, halide_error_constraint_violated("input.extent.1", input.extent.1, "4320", 4320))
 assert(input.stride.2 == 44236800, halide_error_constraint_violated("input.stride.2", input.stride.2, "44236800", 44236800))
 assert(input.min.2 == 0, halide_error_constraint_violated("input.min.2", input.min.2, "0", 0))
 assert(input.extent.2 == 3, halide_error_constraint_violated("input.extent.2", input.extent.2, "3", 3))
 let blur_y.total_extent.1 = int64(blur_y.extent.1)*int64(blur_y.extent.0)
 let blur_y.total_extent.2 = blur_y.total_extent.1*int64(blur_y.extent.2)
 assert((uint64)abs(int64(blur_y.extent.0)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("blur_y", (uint64)abs(int64(blur_y.extent.0)), (uint64)2147483647))
 assert((uint64)abs(int64(blur_y.extent.1)*int64(blur_y.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("blur_y", (uint64)abs(int64(blur_y.extent.1)*int64(blur_y.stride.1)), (uint64)2147483647))
 assert(blur_y.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("blur_y", blur_y.total_extent.1, (int64)2147483647))
 assert((uint64)abs(int64(blur_y.extent.2)*int64(blur_y.stride.2)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("blur_y", (uint64)abs(int64(blur_y.extent.2)*int64(blur_y.stride.2)), (uint64)2147483647))
 assert(blur_y.total_extent.2 <= (int64)2147483647, halide_error_buffer_extents_too_large("blur_y", blur_y.total_extent.2, (int64)2147483647))
 assert(!blur_y.device_dirty, halide_error_device_dirty_with_no_device_support("Output buffer blur_y"))
 assert(!input.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer input"))
 assert((void *)reinterpret((uint64)0) != blur_y, halide_error_host_is_null("Output buffer blur_y"))
 assert((void *)reinterpret((uint64)0) != input, halide_error_host_is_null("Input buffer input"))
 produce blur_y {
  halide_perfctr_enter_loop(profiler_state, profiler_token, 0)
  let t52 = (blur_y.extent.1 + 31)/32
  let t53 = (blur_y.extent.0 + 31)/32
  let t54 = ((blur_y.min.0 - (blur_y.min.2*blur_y.stride.2)) - (blur_y.min.1*blur_y.stride.1)) - blur_y.min.0
  for (blur_y.s0.c, blur_y.min.2, blur_y.extent.2) {
   let t55 = blur_y.s0.c*44236800
   let t56 = (blur_y.s0.c*blur_y.stride.2) + t54
   for (blur_y.s0.y.y, 0, t52) {
    let blur_y.s0.y.yi.base.s = min(blur_y.s0.y.y*32, blur_y.extent.1 + -32)
    let t57 = blur_y.min.1 + blur_y.s0.y.yi.base.s
    for (blur_y.s0.x.x, 0, t53) {
     let blur_y.s0.x.xi.base.s = min(blur_y.s0.x.x*32, blur_y.extent.0 + -32)
     allocate blur_x[float32 * 32 * 34 * 1]
     produce blur_x {
      let t58 = blur_y.min.0 + blur_y.s0.x.xi.base.s
      for (blur_x.s0.y, t57 + -1, 34) {
       let t60 = (blur_x.s0.y - t57)*4
       let t59 = (blur_x.s0.y*10240) + t55
       for (blur_x.s0.x.x, 0, 4) {
        let blur_x.s0.x.v0.base = (blur_x.s0.x.x*8) + t58
        let t43 = blur_x.s0.x.v0.base + t59
        blur_x[ramp(((blur_x.s0.x.x + t60)*8) + 32, 1, 8) aligned(8, 0)] = (input[ramp(t43 + 1, 1, 8)] + (input[ramp(t43 + -1, 1, 8)] + input[ramp(t43, 1, 8)]))*x8(0.333333f)
       }
      }
     }
     consume blur_x {
      let t61 = blur_y.s0.x.xi.base.s + t56
      for (blur_y.s0.y.yi, 0, 32) {
       let t62 = blur_y.s0.y.yi*4
       let t63 = ((blur_y.s0.y.yi + t57)*blur_y.stride.1) + t61
       for (blur_y.s0.x.xi.xi, 0, 4) {
        let t51 = blur_y.s0.x.xi.xi + t62
        blur_y[ramp((blur_y.s0.x.xi.xi*8) + t63, 1, 8)] = (blur_x[ramp((t51*8) + 64, 1, 8) aligned(8, 0)] + (blur_x[ramp(t51*8, 1, 8) aligned(8, 0)] + blur_x[ramp((t51*8) + 32, 1, 8) aligned(8, 0)]))*x8(0.333333f)
       }
      }
     }
     free blur_x
    }
   }
  }
  halide_perfctr_leave_loop(profiler_state, profiler_token, 0)
 }
}
free profiling_func_threads_prod
free profiling_func_threads_cons
free profiling_loop_threads
free profiling_func_names
free profiling_loop_names
}


