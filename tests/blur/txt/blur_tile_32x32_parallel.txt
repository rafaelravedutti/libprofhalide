module name=blur_x, target=x86-64-linux-avx-avx2-avx512-avx512_skylake-f16c-fma-perfctr-sse41
external_plus_metadata func blur_x (input, blur_x) {
(void *)register_destructor("halide_perfctr_pipeline_end", (void *)halide_perfctr_get_state())
allocate profiling_loop_threads[(void *) * 0]
allocate profiling_func_threads_cons[(void *) * 3]
allocate profiling_func_threads_prod[(void *) * 3]
allocate profiling_loop_names[(void *) * 0]
allocate profiling_func_names[(void *) * 3]
profiling_func_threads_cons[2] = 1
profiling_func_threads_prod[2] = 1
profiling_func_threads_prod[1] = 1
profiling_func_names[0] = "overhead"
profiling_func_names[2] = "blur_y"
profiling_func_names[1] = "blur_x"
let profiler_token = halide_perfctr_pipeline_start("blur_x", 3, 0, profiling_func_names, profiling_loop_names, profiling_func_threads_prod, profiling_func_threads_cons, profiling_loop_threads)
assert(0 <= profiler_token, profiler_token)
let profiler_state = (void *)halide_perfctr_get_state()
halide_perfctr_register_func(profiler_state, profiler_token, 2, (uint1)0)
halide_perfctr_register_func(profiler_state, profiler_token, 2, (uint1)1)
assert((uint64)reinterpret((halide_buffer_t *)input.buffer) != (uint64)0, halide_error_buffer_argument_is_null("input"))
assert((uint64)reinterpret((halide_buffer_t *)blur_x.buffer) != (uint64)0, halide_error_buffer_argument_is_null("blur_x"))
let blur_x = (void *)_halide_buffer_get_host((halide_buffer_t *)blur_x.buffer)
let blur_x.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)blur_x.buffer)
let blur_x.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)blur_x.buffer)
let blur_x.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)blur_x.buffer)
let blur_x.min.0 = _halide_buffer_get_min((halide_buffer_t *)blur_x.buffer, 0)
let blur_x.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)blur_x.buffer, 0)
let blur_x.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)blur_x.buffer, 0)
let blur_x.min.1 = _halide_buffer_get_min((halide_buffer_t *)blur_x.buffer, 1)
let blur_x.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)blur_x.buffer, 1)
let blur_x.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)blur_x.buffer, 1)
let blur_x.min.2 = _halide_buffer_get_min((halide_buffer_t *)blur_x.buffer, 2)
let blur_x.extent.2 = _halide_buffer_get_extent((halide_buffer_t *)blur_x.buffer, 2)
let blur_x.stride.2 = _halide_buffer_get_stride((halide_buffer_t *)blur_x.buffer, 2)
let input = (void *)_halide_buffer_get_host((halide_buffer_t *)input.buffer)
let input.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)input.buffer)
let input.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)input.buffer)
let input.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)input.buffer)
let input.min.0 = _halide_buffer_get_min((halide_buffer_t *)input.buffer, 0)
let input.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)input.buffer, 0)
let input.min.1 = _halide_buffer_get_min((halide_buffer_t *)input.buffer, 1)
let input.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)input.buffer, 1)
let input.min.2 = _halide_buffer_get_min((halide_buffer_t *)input.buffer, 2)
let input.extent.2 = _halide_buffer_get_extent((halide_buffer_t *)input.buffer, 2)
let input.stride.2 = _halide_buffer_get_stride((halide_buffer_t *)input.buffer, 2)
let blur_x.extent.0.required.s = min(((blur_x.extent.0 + -1)/32)*32, blur_x.extent.0 + -32) - min(blur_x.extent.0, 32)
let blur_x.extent.1.required.s = min(((blur_x.extent.1 + -1)/32)*32, blur_x.extent.1 + -32) - min(blur_x.extent.1, 32)
let blur_x.stride.2.required = (blur_x.extent.0.required.s + 64)*(blur_x.extent.1.required.s + 64)
let input.extent.0.required.s = max(min(min(((blur_x.extent.0 + -1)/32)*32, blur_x.extent.0 + -32) + blur_x.min.0, 10205), -34) - max(min(min(blur_x.extent.0, 32) + blur_x.min.0, 10274), 35)
let input.extent.1.required.s = let t226.s = min(((blur_x.extent.1 + -1)/32)*32, blur_x.extent.1 + -32) in (max(max(max(max(max(max(min(blur_x.min.1 + t226.s, 4291), max(min(blur_x.min.1 + t226.s, 4285), -34) + 6), min(blur_x.min.1 + t226.s, 4290) + 1), min(blur_x.min.1 + t226.s, 4286) + 5), min(blur_x.min.1 + t226.s, 4288) + 3), min(blur_x.min.1 + t226.s, 4289) + 2), min(blur_x.min.1 + t226.s, 4287) + 4) - min(min(min(min(min(min(max(min(min(blur_x.extent.1, 32) + blur_x.min.1, 4354), 35), max(min(min(blur_x.extent.1, 32) + blur_x.min.1, 4348), 29) + 6), max(min(min(blur_x.extent.1, 32) + blur_x.min.1, 4353), 34) + 1), max(min(min(blur_x.extent.1, 32) + blur_x.min.1, 4349), 30) + 5), max(min(min(blur_x.extent.1, 32) + blur_x.min.1, 4351), 32) + 3), max(min(min(blur_x.extent.1, 32) + blur_x.min.1, 4352), 33) + 2), max(min(min(blur_x.extent.1, 32) + blur_x.min.1, 4350), 31) + 4))
let input.min.1.required.s = min(min(min(min(min(min(max(min(min(blur_x.extent.1, 32) + blur_x.min.1, 4354), 35), max(min(min(blur_x.extent.1, 32) + blur_x.min.1, 4348), 29) + 6), max(min(min(blur_x.extent.1, 32) + blur_x.min.1, 4353), 34) + 1), max(min(min(blur_x.extent.1, 32) + blur_x.min.1, 4349), 30) + 5), max(min(min(blur_x.extent.1, 32) + blur_x.min.1, 4351), 32) + 3), max(min(min(blur_x.extent.1, 32) + blur_x.min.1, 4352), 33) + 2), max(min(min(blur_x.extent.1, 32) + blur_x.min.1, 4350), 31) + 4)
assert(!(uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)input.buffer) || ((max(min(min(blur_x.extent.0, 32) + blur_x.min.0, 10274), 35) + input.extent.0.required.s) <= 10205), halide_error_constraints_make_required_region_smaller("Input buffer input", 0, 0, 10239, max(min(min(blur_x.extent.0, 32) + blur_x.min.0, 10274), 35) + -35, (max(min(min(blur_x.extent.0, 32) + blur_x.min.0, 10274), 35) + input.extent.0.required.s) + 34))
assert(!(uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)input.buffer) || ((input.extent.1.required.s + input.min.1.required.s) <= 4291), halide_error_constraints_make_required_region_smaller("Input buffer input", 1, 0, 4319, input.min.1.required.s + -35, (input.extent.1.required.s + input.min.1.required.s) + 28))
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)blur_x.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)blur_x.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)blur_x.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 32, 3, (halide_dimension_t *)make_struct((min(blur_x.extent.0, 32) + blur_x.min.0) + -32, blur_x.extent.0.required.s + 64, 1, 0, (min(blur_x.extent.1, 32) + blur_x.min.1) + -32, blur_x.extent.1.required.s + 64, blur_x.extent.0.required.s + 64, 0, blur_x.min.2, blur_x.extent.2, blur_x.stride.2.required, 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)input.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)input.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)input.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 32, 3, (halide_dimension_t *)make_struct(0, 10240, 1, 0, 0, 4320, 10240, 0, 0, 1, 44236800, 0), (uint64)0)
}
if (!((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)blur_x.buffer) || (uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)input.buffer))) {
 assert(blur_x.type == (uint32)73730, halide_error_bad_type("Output buffer blur_x", blur_x.type, (uint32)73730))
 assert(blur_x.dimensions == 3, halide_error_bad_dimensions("Output buffer blur_x", blur_x.dimensions, 3))
 assert(input.type == (uint32)73730, halide_error_bad_type("Input buffer input", input.type, (uint32)73730))
 assert(input.dimensions == 3, halide_error_bad_dimensions("Input buffer input", input.dimensions, 3))
 assert((32 <= blur_x.extent.0) && ((((min(blur_x.extent.0, 32) + blur_x.min.0) + blur_x.extent.0.required.s) + 32) <= (blur_x.extent.0 + blur_x.min.0)), halide_error_access_out_of_bounds("Output buffer blur_x", 0, (min(blur_x.extent.0, 32) + blur_x.min.0) + -32, ((min(blur_x.extent.0, 32) + blur_x.min.0) + blur_x.extent.0.required.s) + 31, blur_x.min.0, (blur_x.extent.0 + blur_x.min.0) + -1))
 assert((32 <= blur_x.extent.1) && ((((min(blur_x.extent.1, 32) + blur_x.min.1) + blur_x.extent.1.required.s) + 32) <= (blur_x.extent.1 + blur_x.min.1)), halide_error_access_out_of_bounds("Output buffer blur_x", 1, (min(blur_x.extent.1, 32) + blur_x.min.1) + -32, ((min(blur_x.extent.1, 32) + blur_x.min.1) + blur_x.extent.1.required.s) + 31, blur_x.min.1, (blur_x.extent.1 + blur_x.min.1) + -1))
 assert(0 <= blur_x.extent.2, halide_error_buffer_extents_negative("Output buffer blur_x", 2, blur_x.extent.2))
 assert(((input.min.0 + 3) <= max(min(blur_x.min.0, 10242), 3)) && (((max(min(blur_x.min.0, 10242), 3) + input.extent.0.required.s) + 67) <= (input.extent.0 + input.min.0)), halide_error_access_out_of_bounds("Input buffer input", 0, max(min(blur_x.min.0, 10242), 3) + -3, (max(min(blur_x.min.0, 10242), 3) + input.extent.0.required.s) + 66, input.min.0, (input.extent.0 + input.min.0) + -1))
 assert(0 <= input.extent.0, halide_error_buffer_extents_negative("Input buffer input", 0, input.extent.0))
 assert(((input.min.1 + 35) <= input.min.1.required.s) && (((input.extent.1.required.s + input.min.1.required.s) + 29) <= (input.extent.1 + input.min.1)), halide_error_access_out_of_bounds("Input buffer input", 1, input.min.1.required.s + -35, (input.extent.1.required.s + input.min.1.required.s) + 28, input.min.1, (input.extent.1 + input.min.1) + -1))
 assert(0 <= input.extent.1, halide_error_buffer_extents_negative("Input buffer input", 1, input.extent.1))
 assert((input.min.2 <= 0) && (1 <= (input.extent.2 + input.min.2)), halide_error_access_out_of_bounds("Input buffer input", 2, 0, 0, input.min.2, (input.extent.2 + input.min.2) + -1))
 assert(0 <= input.extent.2, halide_error_buffer_extents_negative("Input buffer input", 2, input.extent.2))
 assert(blur_x.stride.0 == 1, halide_error_constraint_violated("blur_x.stride.0", blur_x.stride.0, "1", 1))
 assert(input.stride.0 == 1, halide_error_constraint_violated("input.stride.0", input.stride.0, "1", 1))
 assert(input.min.0 == 0, halide_error_constraint_violated("input.min.0", input.min.0, "0", 0))
 assert(input.extent.0 == 10240, halide_error_constraint_violated("input.extent.0", input.extent.0, "10240", 10240))
 assert(input.stride.1 == 10240, halide_error_constraint_violated("input.stride.1", input.stride.1, "10240", 10240))
 assert(input.min.1 == 0, halide_error_constraint_violated("input.min.1", input.min.1, "0", 0))
 assert(input.extent.1 == 4320, halide_error_constraint_violated("input.extent.1", input.extent.1, "4320", 4320))
 assert(input.stride.2 == 44236800, halide_error_constraint_violated("input.stride.2", input.stride.2, "44236800", 44236800))
 assert(input.min.2 == 0, halide_error_constraint_violated("input.min.2", input.min.2, "0", 0))
 assert(input.extent.2 == 1, halide_error_constraint_violated("input.extent.2", input.extent.2, "1", 1))
 let blur_x.total_extent.1 = int64(blur_x.extent.1)*int64(blur_x.extent.0)
 let blur_x.total_extent.2 = blur_x.total_extent.1*int64(blur_x.extent.2)
 assert((uint64)abs(int64(blur_x.extent.0)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("blur_x", (uint64)abs(int64(blur_x.extent.0)), (uint64)2147483647))
 assert((uint64)abs(int64(blur_x.extent.1)*int64(blur_x.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("blur_x", (uint64)abs(int64(blur_x.extent.1)*int64(blur_x.stride.1)), (uint64)2147483647))
 assert(blur_x.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("blur_x", blur_x.total_extent.1, (int64)2147483647))
 assert((uint64)abs(int64(blur_x.extent.2)*int64(blur_x.stride.2)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("blur_x", (uint64)abs(int64(blur_x.extent.2)*int64(blur_x.stride.2)), (uint64)2147483647))
 assert(blur_x.total_extent.2 <= (int64)2147483647, halide_error_buffer_extents_too_large("blur_x", blur_x.total_extent.2, (int64)2147483647))
 assert(!blur_x.device_dirty, halide_error_device_dirty_with_no_device_support("Output buffer blur_x"))
 assert(!input.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer input"))
 assert((void *)reinterpret((uint64)0) != blur_x, halide_error_host_is_null("Output buffer blur_x"))
 assert((void *)reinterpret((uint64)0) != input, halide_error_host_is_null("Input buffer input"))
 produce blur_x {
  let t246 = (blur_x.extent.1 + 31)/32
  let t247 = (blur_x.extent.0 + 31)/32
  let t250 = ((blur_x.min.0 - (blur_x.min.2*blur_x.stride.2)) - (blur_x.min.1*blur_x.stride.1)) - blur_x.min.0
  for (blur_x.s0.c, blur_x.min.2, blur_x.extent.2) {
   let t253 = (blur_x.s0.c*blur_x.stride.2) + t250
   parallel (blur_x.s0.y.y, 0, t246) {
    let blur_x.s0.y.yi.base.s = min(blur_x.s0.y.y*32, blur_x.extent.1 + -32)
    let t261 = blur_x.min.1 + blur_x.s0.y.yi.base.s
    let t262 = min(max(t261, 3), t261 + 32)
    let t263 = min(blur_x.s0.y.y*32, blur_x.extent.1 + -32)
    let t264 = blur_x.min.1 + t263
    let t265 = min(t264, 4285)
    let t266 = min(max(t264, 3), t264 + 32)
    let t260 = (t264 - max(t265 + 32, t266)) + 32
    let t258 = max(t265 - t266, -32) + 32
    let t255 = max(min(t261, 4285) + 32, t262)
    let t257 = max(min((3 - blur_x.min.1) - t263, 32), 0)
    for (blur_x.s0.x.x, 0, t247) {
     let blur_x.s0.x.xi.base.s = min(blur_x.s0.x.x*32, blur_x.extent.0 + -32)
     allocate blur_y[float32 * 38 * 32 * 1]
     produce blur_y {
      halide_perfctr_enter_func(profiler_state, profiler_token, 2, (uint1)1)
      let t267 = blur_x.min.0 + blur_x.s0.x.xi.base.s
      for (blur_y.s0.y, t261, t257) {
       let t268 = max(blur_y.s0.y, 3)*10240
       let t270 = max(blur_y.s0.y, 2)*10240
       let t273 = max(blur_y.s0.y, 1)*10240
       let t272 = max(blur_y.s0.y, 0)*10240
       let t274 = max(blur_y.s0.y, -1)*10240
       let t271 = max(blur_y.s0.y, -2)*10240
       let t269 = max(blur_y.s0.y, -3)*10240
       let t275 = ((blur_y.s0.y - t261)*38) - t267
       for (blur_y.s0.x, t267 + -3, 38) {
        let t236 = max(min(blur_y.s0.x, 10239), 0)
        blur_y[(blur_y.s0.x + t275) + 3] = ((input[(t236 + t268) + -30720] + input[(t236 + t269) + 30720])*0.035994f) + (((input[(t236 + t270) + -20480] + input[(t236 + t271) + 20480])*0.109340f) + ((input[t236 + t272]*0.265961f) + ((input[(t236 + t273) + -10240] + input[(t236 + t274) + 10240])*0.212965f)))
       }
      }
      let t282 = blur_x.min.0 + blur_x.s0.x.xi.base.s
      let t283 = min(max(t282, 3), t282 + 38)
      let t284 = min(blur_x.s0.x.x*32, blur_x.extent.0 + -32)
      let t285 = blur_x.min.0 + t284
      let t286 = min(t285, 10205)
      let t287 = min(max(t285, 3), t285 + 38)
      let t281 = (t285 - max(t286 + 38, t287)) + 38
      let t280 = max(t286 - t287, -38) + 38
      let t277 = max(min(t282, 10205) + 38, t283)
      let t279 = max(min((3 - blur_x.min.0) - t284, 38), 0)
      for (blur_y.s0.y, t262, t258) {
       let t288 = blur_y.s0.y*10240
       let t289 = ((blur_y.s0.y - t261)*38) - t282
       for (blur_y.s0.x, t282 + -3, t279) {
        let t216 = max(blur_y.s0.x, 0) + t288
        blur_y[(blur_y.s0.x + t289) + 3] = ((input[t216 + -30720] + input[t216 + 30720])*0.035994f) + (((input[t216 + -20480] + input[t216 + 20480])*0.109340f) + ((input[t216]*0.265961f) + ((input[t216 + -10240] + input[t216 + 10240])*0.212965f)))
       }
       let t290 = blur_y.s0.y*10240
       let t291 = ((blur_y.s0.y - t261)*38) - t282
       for (blur_y.s0.x, t283 + -3, t280) {
        let t241 = blur_y.s0.x + t290
        blur_y[(blur_y.s0.x + t291) + 3] = ((input[t241 + -30720] + input[t241 + 30720])*0.035994f) + (((input[t241 + -20480] + input[t241 + 20480])*0.109340f) + ((input[t241]*0.265961f) + ((input[t241 + -10240] + input[t241 + 10240])*0.212965f)))
       }
       let t292 = blur_y.s0.y*10240
       let t293 = ((blur_y.s0.y - t261)*38) - t282
       for (blur_y.s0.x, t277 + -3, t281) {
        let t221 = max(min(blur_y.s0.x, 10239), 0) + t292
        blur_y[(blur_y.s0.x + t293) + 3] = ((input[t221 + -30720] + input[t221 + 30720])*0.035994f) + (((input[t221 + -20480] + input[t221 + 20480])*0.109340f) + ((input[t221]*0.265961f) + ((input[t221 + -10240] + input[t221 + 10240])*0.212965f)))
       }
      }
      let t294 = blur_x.min.0 + blur_x.s0.x.xi.base.s
      for (blur_y.s0.y, t255, t260) {
       let t295 = max(min(blur_y.s0.y, 4322), 3)*10240
       let t297 = max(min(blur_y.s0.y, 4321), 2)*10240
       let t300 = max(min(blur_y.s0.y, 4320), 1)*10240
       let t299 = max(min(blur_y.s0.y, 4319), 0)*10240
       let t301 = max(min(blur_y.s0.y, 4318), -1)*10240
       let t298 = max(min(blur_y.s0.y, 4317), -2)*10240
       let t296 = max(min(blur_y.s0.y, 4316), -3)*10240
       let t302 = ((blur_y.s0.y - t261)*38) - t294
       for (blur_y.s0.x, t294 + -3, 38) {
        let t244 = max(min(blur_y.s0.x, 10239), 0)
        blur_y[(blur_y.s0.x + t302) + 3] = ((input[(t244 + t295) + -30720] + input[(t244 + t296) + 30720])*0.035994f) + (((input[(t244 + t297) + -20480] + input[(t244 + t298) + 20480])*0.109340f) + ((input[t244 + t299]*0.265961f) + ((input[(t244 + t300) + -10240] + input[(t244 + t301) + 10240])*0.212965f)))
       }
      }
      halide_perfctr_leave_func(profiler_state, profiler_token, 2, (uint1)1)
     }
     consume blur_y {
      halide_perfctr_enter_func(profiler_state, profiler_token, 2, (uint1)0)
      let t303 = blur_x.s0.x.xi.base.s + t253
      for (blur_x.s0.y.yi, 0, 32) {
       let t304 = blur_x.s0.y.yi*38
       let t305 = ((blur_x.s0.y.yi + t261)*blur_x.stride.1) + t303
       for (blur_x.s0.x.xi, 0, 32) {
        let t245 = blur_x.s0.x.xi + t304
        blur_x[blur_x.s0.x.xi + t305] = ((blur_y[t245] + blur_y[t245 + 6])*0.035994f) + (((blur_y[t245 + 1] + blur_y[t245 + 5])*0.109340f) + ((blur_y[t245 + 3]*0.265961f) + ((blur_y[t245 + 2] + blur_y[t245 + 4])*0.212965f)))
       }
      }
      halide_perfctr_leave_func(profiler_state, profiler_token, 2, (uint1)0)
     }
     free blur_y
    }
   }
  }
 }
}
free profiling_func_threads_prod
free profiling_func_threads_cons
free profiling_loop_threads
free profiling_func_names
free profiling_loop_names
}


