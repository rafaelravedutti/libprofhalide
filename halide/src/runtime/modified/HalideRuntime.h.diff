diff --git a/src/runtime/HalideRuntime.h b/src/runtime/HalideRuntime.h
index 25851acb7..7a67d988c 100644
--- a/src/runtime/HalideRuntime.h
+++ b/src/runtime/HalideRuntime.h
@@ -1275,7 +1275,8 @@ typedef enum halide_target_feature_t {
     halide_target_feature_asan = 53, ///< Enable hooks for ASAN support.
     halide_target_feature_d3d12compute = 54, ///< Enable Direct3D 12 Compute runtime.
     halide_target_feature_check_unsafe_promises = 55, ///< Insert assertions for promises.
-    halide_target_feature_end = 56 ///< A sentinel. Every target is considered to have this feature, and setting this feature does nothing.
+    halide_target_feature_papi = 56, /// Launch a profiler using PAPI that uses hardware register counters
+    halide_target_feature_end = 57 ///< A sentinel. Every target is considered to have this feature, and setting this feature does nothing.
 } halide_target_feature_t;
 
 /** This function is called internally by Halide in some situations to determine
@@ -1744,6 +1745,39 @@ enum {
  * inspection. Lock it before using to pause the profiler. */
 extern struct halide_profiler_state *halide_profiler_get_state();
 
+struct halide_papi_func_stats {
+    /** The name of this Func. A global constant string. */
+    const char *name;
+};
+
+/** Structure for the PAPI profiler pipelines */
+struct halide_papi_pipeline_stats {
+    /** An array containing states for each Func in this pipeline. */
+    struct halide_papi_func_stats *funcs;
+
+    /** The name of this pipeline. A global constant string. */
+    const char *name;
+
+    /** The next pipeline_stats pointer. It's a void * because types
+     * in the Halide runtime may not currently be recursive. */
+    void *next;
+
+    /** The number of funcs in this pipeline. */
+    int num_funcs;
+};
+
+/** Structure for the PAPI profiler */
+struct halide_papi_state {
+    int current_func;
+
+    /** A linked list of stats gathered for each pipeline. */
+    struct halide_papi_pipeline_stats *pipelines;
+};
+
+/** Get a pointer to the global PAPI profiler state for programmatic
+ * inspection. Lock it before using to pause the profiler. */
+extern struct halide_papi_state *halide_papi_get_state();
+
 /** Get a pointer to the pipeline state associated with pipeline_name.
  * This function grabs the global profiler state's lock on entry. */
 extern struct halide_profiler_pipeline_stats *halide_profiler_get_pipeline_state(const char *pipeline_name);
