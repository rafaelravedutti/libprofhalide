diff --git a/src/runtime/HalideRuntime.h b/src/runtime/HalideRuntime.h
index 25851acb7..69f5f7cb3 100644
--- a/src/runtime/HalideRuntime.h
+++ b/src/runtime/HalideRuntime.h
@@ -1275,7 +1275,8 @@ typedef enum halide_target_feature_t {
     halide_target_feature_asan = 53, ///< Enable hooks for ASAN support.
     halide_target_feature_d3d12compute = 54, ///< Enable Direct3D 12 Compute runtime.
     halide_target_feature_check_unsafe_promises = 55, ///< Insert assertions for promises.
-    halide_target_feature_end = 56 ///< A sentinel. Every target is considered to have this feature, and setting this feature does nothing.
+    halide_target_feature_papi = 56, /// Launch a profiler using PAPI that uses hardware register counters
+    halide_target_feature_end = 57 ///< A sentinel. Every target is considered to have this feature, and setting this feature does nothing.
 } halide_target_feature_t;
 
 /** This function is called internally by Halide in some situations to determine
@@ -1744,10 +1745,103 @@ enum {
  * inspection. Lock it before using to pause the profiler. */
 extern struct halide_profiler_state *halide_profiler_get_state();
 
+struct halide_papi_func_stats {
+    /** Total time taken evaluating this Func (in nanoseconds). */
+    uint64_t time;
+
+    /** The name of this Func. A global constant string. */
+    const char *name;
+
+    /** The average number of thread pool worker threads active while computing this Func. */
+    uint64_t active_threads_numerator, active_threads_denominator;
+};
+
+/** Structure for the PAPI profiler pipelines */
+struct halide_papi_pipeline_stats {
+    /** Total time taken evaluating this pipeline (in nanoseconds). */
+    uint64_t time;
+
+    /** The average number of thread pool worker threads doing useful
+     * work while computing this pipeline. */
+    uint64_t active_threads_numerator, active_threads_denominator;
+
+    /** The name of this pipeline. A global constant string. */
+    const char *name;
+
+    /** An array containing states for each Func in this pipeline. */
+    struct halide_papi_func_stats *funcs;
+
+    /** The next pipeline_stats pointer. It's a void * because types
+     * in the Halide runtime may not currently be recursive. */
+    void *next;
+
+    /** The number of funcs in this pipeline. */
+    int num_funcs;
+
+    /** An internal base id used to identify the funcs in this pipeline. */
+    int first_func_id;
+
+    /** The number of times this pipeline has been run. */
+    int runs;
+
+    /** The total number of samples taken inside of this pipeline. */
+    int samples;
+};
+
+/** Structure for the PAPI profiler */
+struct halide_papi_state {
+    /** Guards access to the fields below. If not locked, the sampling
+     * profiler thread is free to modify things below (including
+     * reordering the linked list of pipeline stats). */
+    struct halide_mutex lock;
+
+    /** The amount of time the profiler thread sleeps between samples
+     * in milliseconds. Defaults to 1 */
+    int sleep_time;
+
+    /** An internal id used for bookkeeping. */
+    int first_free_id;
+
+    /** The id of the current running Func. Set by the pipeline, read
+     * periodically by the profiler thread. */
+    int current_func;
+
+    /** The number of threads currently doing work. */
+    int active_threads;
+
+    /** A linked list of stats gathered for each pipeline. */
+    struct halide_papi_pipeline_stats *pipelines;
+
+    /** Retrieve remote profiler state. Used so that the sampling
+     * profiler can follow along with execution that occurs elsewhere,
+     * e.g. on a DSP. If null, it reads from the int above instead. */
+    void (*get_remote_profiler_state)(int *func, int *active_workers);
+
+    /** Sampling thread reference to be joined at shutdown. */
+    struct halide_thread *sampling_thread;
+};
+
+/** Get a pointer to the global PAPI profiler state for programmatic
+ * inspection. Lock it before using to pause the profiler. */
+extern struct halide_papi_state *halide_papi_get_state();
+
+/** Profiler func ids with special meanings. */
+enum {
+    /// current_func takes on this value when not inside Halide code
+    halide_papi_outside_of_halide = -1,
+    /// Set current_func to this value to tell the profiling thread to
+    /// halt. It will start up again next time you run a pipeline with
+    /// profiling enabled.
+    halide_papi_please_stop = -2
+};
+
+
 /** Get a pointer to the pipeline state associated with pipeline_name.
  * This function grabs the global profiler state's lock on entry. */
 extern struct halide_profiler_pipeline_stats *halide_profiler_get_pipeline_state(const char *pipeline_name);
 
+extern struct halide_papi_pipeline_stats *halide_papi_get_pipeline_state(const char *pipeline_name);
+
 /** Reset profiler state cheaply. May leave threads running or some
  * memory allocated but all accumluated statistics are reset.
  * WARNING: Do NOT call this method while any halide pipeline is
@@ -1756,6 +1850,8 @@ extern struct halide_profiler_pipeline_stats *halide_profiler_get_pipeline_state
  * state without grabbing the global profiler state's lock. */
 extern void halide_profiler_reset();
 
+extern void halide_papi_reset();
+
 /** Reset all profiler state.
  * WARNING: Do NOT call this method while any halide pipeline is
  * running; halide_profiler_memory_allocate/free and
@@ -1763,10 +1859,14 @@ extern void halide_profiler_reset();
  * state without grabbing the global profiler state's lock. */
 void halide_profiler_shutdown();
 
+void halide_papi_shutdown();
+
 /** Print out timing statistics for everything run since the last
  * reset. Also happens at process exit. */
 extern void halide_profiler_report(void *user_context);
 
+extern void halide_papi_report(void *user_context);
+
 /// \name "Float16" functions
 /// These functions operate of bits (``uint16_t``) representing a half
 /// precision floating point number (IEEE-754 2008 binary16).
